/*
Navicat MySQL Data Transfer

Source Server         : blog
Source Server Version : 50650
Source Host           : 81.70.149.182:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50650
File Encoding         : 65001

Date: 2021-05-19 22:50:59
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `appreciation` bit(1) NOT NULL,
  `commentabled` bit(1) NOT NULL,
  `content` longtext,
  `create_time` datetime DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `first_picture` varchar(255) DEFAULT NULL,
  `flag` varchar(255) DEFAULT NULL,
  `published` bit(1) NOT NULL,
  `recommend` bit(1) NOT NULL,
  `share_statement` bit(1) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `views` int(11) DEFAULT NULL,
  `type_id` bigint(20) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK292449gwg5yf7ocdlmswv9w4j` (`type_id`),
  KEY `FK8ky5rrsxh01nkhctmo7d48p82` (`user_id`),
  CONSTRAINT `FK292449gwg5yf7ocdlmswv9w4j` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`),
  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES ('2', '', '', '	积极“备战”；乐观“应战”；努力“奋战”；争取“胜战”！\n	坚持到底，就是胜利！\n	祝福你：旗开得胜，\n	逢考必过！\n	真心地祝福你驾考取得好成绩，发挥出最好的水平。\n	考研胜利，旗开得胜！上岸成功！', '2020-04-10 18:28:37', '腌臜菜', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(2).jpg', '原创', '', '', '', '祝贺李小菜科四凯旋归来！！！', '2020-04-10 18:28:37', '37', '2', '123456');
INSERT INTO `t_blog` VALUES ('3', '', '', '不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n## 不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n#### 不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n## 不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖\n<img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1586524717638&di=877af050af9f61378302332ea0d20e25&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw350h352%2F20171220%2F5b54-fypvuqe1767474.jpg\">\n#### 胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖不胖', '2020-04-10 18:31:45', 'no fat  no  obesity', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(3).jpg', '原创', '', '\0', '', '菜宝永不胖', '2020-04-10 18:31:45', '22', '2', '123456');
INSERT INTO `t_blog` VALUES ('4', '', '\0', '哈哈哈\r\n```c++\r\n#include<iostream>\r\n```\r\n\r\n\r\n	asdasd\r\n	asdasd\r\n```\r\nimport\r\nclass int floag\r\nfloat a;\r\nSystem.out.print(123);\r\n```', '2020-04-16 10:12:19', 'sadasd', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(4).jpg', '原创', '', '\0', '', 'sad', '2020-04-16 10:12:19', '21', '1', '123456');
INSERT INTO `t_blog` VALUES ('5', '', '', '```\r\n<div class=\"postBody\">           \r\n<div class=\"blogpost-body cnblogs-markdown\" id=\"cnblogs_post_body\">\r\n    <font size=\"3\"> \r\n<h1 id=\"搭建网站one-day\">搭建网站one day</h1>\r\n<h2 id=\"今天跟随着姜大佬，完成了好多好多。\">今天跟随着姜大佬，完成了好多好多。</h2>\r\n<blockquote>\r\n<p>先把网页的一个小错误给更改了。<br>\r\n默认的是index，但是源码是没有加index，直接进入是不需要加的。加上就是错误的，在springboot框架里的indexcontrol层的get方法改成/即可</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>博客首页有一个小错误，里面少了一个双引号，导致刚进入时显示500status error</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>然后为什么要搭建网站呢，因为我们今天也刚好步入web前端开发的正式课程。希望可以增加一下自己的基础。(偷偷告诉你们，疫情的福利：我有6个月免费的服务器)</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>其实Linux的centos版本的服务器是需要大量配置的，就比如一个mysql就需要弄好长时间。各种错误，各种百度。记得第一次冯大佬给我说的时候，一直远程不上mysql，弄了大半天，最后是阿里云控制台的3306端口没有开。。。</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>但是今天就有不一样了， 就像有一个可视化的东西，你要配置的东西点击安装设置等等即可就OK了，配置服务器的工作量就小了很多，接下来就可以用大量的时间去写前端和后端了。哪个宝贝叫做宝塔<br>\r\ndengdengdeng就是这个！<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331173215630-1370884691.png\"><br>\r\n上面就是宝塔<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331173300517-1942390816.png\"><br>\r\n这个是网站，静态网站特别好设置，只需要将你的index.html放到这个网站的一个地方就OK  ，这个是进入网址http://47.115.45.210:6666/d2c2a1fe</p>\r\n</blockquote>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331173520161-2051105444.png\"><br>\r\n里面的数据库一键部署OK。直接就可以用</p>\r\n<p>我的网站项目采用前端框架是vue，后端框架是springboot</p>\r\n<h1 id=\"把这个项目部署到服务器上的步骤是\">把这个项目部署到服务器上的步骤是</h1>\r\n<h3 id=\"1先把你自己的项目打成jar包。\">1先把你自己的项目打成jar包。</h3>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331173716168-401217314.png\"><br>\r\n点击这里的package即可完成</p>\r\n<h3 id=\"2讲这个上传到服务器的某一个目录上。比如下面的root目录\">2讲这个上传到服务器的某一个目录上。比如下面的root目录</h3>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331173816149-1792544468.png\"></p>\r\n<h3 id=\"3先用ssh远程连接服务器\">3先用ssh远程连接服务器</h3>\r\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">ssh</span> <span class=\"hljs-selector-tag\">root</span>@<span class=\"hljs-keyword\">47</span>.<span class=\"hljs-keyword\">115</span>.<span class=\"hljs-keyword\">45</span>.<span class=\"hljs-keyword\">210</span>\r\nthen password:\r\n</code></pre>\r\n<h3 id=\"4在你上传的目录下执行代码\">4在你上传的目录下执行代码</h3>\r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">nohup</span> java -jar blog-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>-SNAPSHOT.jar &gt; temp.out <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> &amp;\r\nps -ef|grep blog-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>-SNAPSHOT.jar\r\n</code></pre>\r\n<h3 id=\"5会生成tempout文件这个是java的重定向，就跟intel-idea产生日志是一样的，如果你本机上是没有问题的。但是我踩了好多的坑，一直是不行的，大部分的情况都是端口没有开放，这样你去阿里云控制台开放一下就可以了。\">5会生成temp.out文件这个是java的重定向，就跟Intel idea产生日志是一样的，如果你本机上是没有问题的。但是我踩了好多的坑，一直是不行的，大部分的情况都是端口没有开放，这样你去阿里云控制台开放一下就可以了。</h3>\r\n<h3 id=\"6根据的网站，我采用了反向代理，然后就直接输入ip就可以访问了，遗憾的是我的域名刚刚买还没有备案成功，还不能访问。\">6根据的网站，我采用了反向代理，然后就直接输入ip就可以访问了，遗憾的是我的域名刚刚买还没有备案成功，还不能访问。</h3>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331174701125-661284758.png\"><br>\r\n如果不采用反向代理，我就必须得加上tomcat的8080端口号，但是我懒，我不想加，就给他反向代理了一下。</p>\r\n<h3 id=\"7关于博客数据库，-ddl-auto-update是可以根据写的实体类里面自动生成数据库的，这样就不用再麻烦的创建数据库了。\">7关于博客数据库， ddl-auto: update是可以根据写的实体类里面自动生成数据库的，这样就不用再麻烦的创建数据库了。</h3>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331174818726-1402603169.png\"></p>\r\n<p>然后就是，今天对root、/目录有了更深的理解，之前迷迷糊糊的</p>\r\n<blockquote>\r\n<p>@前面是用户名，我在root下，最后面是~说明是在家里，普通用户在home里，root用户在root里<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331175008936-1200930121.png\"><br>\r\n而这个符合/是跟目录是服务器的根目录，而菲比root目录。<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331175105567-2039209259.png\"></p>\r\n</blockquote>\r\n<h3 id=\"还有就是，这课着实有点多。。。\">还有就是，这课着实有点多。。。</h3>\r\n<blockquote>\r\n<p>最后安利一下，有道词典，这两天再做英语阅读，翻译还是比较难的，然后词汇量还行，就是简单的词，生僻的意思，还有就是介词短语不咋会翻译。不会的词也有,然后我通过有道词典记录下来了，然后晚上的时候看，这总比无厘头的背单词好，而且被阅读难住的词印象深刻，我觉得可以。<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331175354490-326072635.png\">PC<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202003/1648896-20200331175512428-489196937.png\">Android</p>\r\n</blockquote>\r\n\r\n</font></div><font size=\"3\">\r\n<div id=\"MySignature\"></div>\r\n<div class=\"clear\"></div>\r\n<div id=\"blog_post_info_block\"><div id=\"BlogPostCategory\">\r\n    分类: \r\n            <a href=\"https://www.cnblogs.com/shenxiaodou/category/1685814.html\" target=\"_blank\">网站建设</a></div>\r\n\r\n\r\n    <div id=\"blog_post_info\">\r\n<div id=\"green_channel\">\r\n        <a id=\"green_channel_digg\" onclick=\"DiggIt(12606927,cb_blogId,1);green_channel_success(this,\'谢谢推荐！\');\" href=\"javascript:void(0);\">好文要顶</a>\r\n        <a id=\"green_channel_follow\" onclick=\"follow(\'d711a1cb-bb82-42fe-0824-08d6b53ef329\');\" href=\"javascript:void(0);\">关注我</a>\r\n    <a id=\"green_channel_favorite\" onclick=\"AddToWz(cb_entryId);return false;\" href=\"javascript:void(0);\">收藏该文</a>\r\n    <a title=\"分享至新浪微博\" id=\"green_channel_weibo\" onclick=\"ShareToTsina()\" href=\"javascript:void(0);\"><img alt=\"\" src=\"https://common.cnblogs.com/images/icon_weibo_24.png\"></a>\r\n    <a title=\"分享至微信\" id=\"green_channel_wechat\" onclick=\"shareOnWechat()\" href=\"javascript:void(0);\"><img alt=\"\" src=\"https://common.cnblogs.com/images/wechat.png\"></a>\r\n</div>\r\n<div id=\"author_profile\">\r\n    <div class=\"author_profile_info\" id=\"author_profile_info\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\" target=\"_blank\"><img class=\"author_avatar\" alt=\"\" src=\"https://pic.cnblogs.com/face/1648896/20200315231404.png\"></a>\r\n        <div class=\"author_profile_info\" id=\"author_profile_detail\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\">小申同学</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followees/\">关注 - 7</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followers/\">粉丝 - 4</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"author_profile_honor\"></div>\r\n    <div id=\"author_profile_follow\">\r\n                <a onclick=\"follow(\'d711a1cb-bb82-42fe-0824-08d6b53ef329\');return false;\" href=\"javascript:void(0);\">+加关注</a>\r\n    </div>\r\n</div>\r\n<div id=\"div_digg\">\r\n    <div class=\"diggit\" onclick=\"votePost(12606927,\'Digg\')\">\r\n        <span class=\"diggnum\" id=\"digg_count\">0</span>\r\n    </div>\r\n    <div class=\"buryit\" onclick=\"votePost(12606927,\'Bury\')\">\r\n        <span class=\"burynum\" id=\"bury_count\">0</span>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div class=\"diggword\" id=\"digg_tips\">\r\n    </div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    currentDiggType = 0;\r\n</script></div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"post_next_prev\">\r\n    <a class=\"p_n_p_prefix\" href=\"https://www.cnblogs.com/shenxiaodou/p/12597455.html\">« </a> 上一篇：    <a title=\"发布于 2020-03-30 11:30\" href=\"https://www.cnblogs.com/shenxiaodou/p/12597455.html\">ma\'p\'ma\'p\'ma\'p</a>\r\n    <br>\r\n    <a class=\"p_n_p_prefix\" href=\"https://www.cnblogs.com/shenxiaodou/p/12608027.html\">» </a> 下一篇：    <a title=\"发布于 2020-03-31 20:22\" href=\"https://www.cnblogs.com/shenxiaodou/p/12608027.html\">协议栈处理过程</a>\r\n\r\n</div>\r\n</div>\r\n            </font></div>\r\n```', '2020-04-26 16:11:47', '网站开发', 'http://szq.szq666.xyz/2034aad23b7118a6.jpg', '原创', '', '', '', '网站开发', '2020-05-18 10:36:28', '40', '6', '123456');
INSERT INTO `t_blog` VALUES ('6', '\0', '\0', '<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\r\n    <style>\r\n	/*解析*/\r\n	@media screen and (min-width: 0px) {\r\n\r\n		.__zy_bounce __zy_animated __zy_infinite {\r\n			display: none;\r\n		}\r\n\r\n		.div-box {\r\n			display: flex;\r\n			height: 40px;\r\n			line-height: 40px;\r\n			background: #fff;\r\n			text-align: center;\r\n			width: 100%;\r\n			margin-top: 20px;\r\n			background-color: var(--BlockColor);\r\n		}\r\n\r\n		.input-url {\r\n			flex: 1;\r\n			padding: 10px;\r\n			outline: none;\r\n			margin-left: 5px;\r\n			background: var(--BlockColor);\r\n			border: 1px solid var(--DividColor);\r\n			border-radius: 4px;\r\n			color: inherit;\r\n		}\r\n\r\n		.jiexi {\r\n			/*width: 100px;*/\r\n			background: var(--ThemeColor);\r\n			border: 1px solid var(--ThemeColor);\r\n			padding: 10px 20px;\r\n			border-radius: 4px;\r\n			margin: 0 4px 0 10px;\r\n			height: 40px;\r\n			outline: none;\r\n			color: #fff;\r\n		}\r\n\r\n		.jiexi:hover {\r\n			opacity: 0.9;\r\n		}\r\n\r\n		/* 下拉 */\r\n		.dropdown {\r\n			position: relative;\r\n			display: inline-block;\r\n			margin-right: 10px;\r\n		}\r\n\r\n		.dropdown-content {\r\n			display: none;\r\n			z-index: 9999;\r\n			/*margin-left: 10px;*/\r\n			position: absolute;\r\n			background-color: var(--BlockColor);\r\n			width: 90px;\r\n			color: inherit;\r\n			border-radius: 4px;\r\n			box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n		}\r\n\r\n		.dropdown:hover .dropdown-content {\r\n			display: block;\r\n		}\r\n\r\n		.dropdown-content p {\r\n			color: inherit;\r\n			display: block;\r\n			cursor: pointer;\r\n		}\r\n\r\n		.dropdown-content p:hover {\r\n			background-color: var(--BackgroundColor);\r\n		}\r\n	}\r\n\r\n</style>\r\n<div class=\"div-box\" sytle=\"background-color:var(--BlockColor)\">\r\n	<input id=\"url\" type=\"url\" class=\"input-url\" placeholder=\"请输入视频地址\">\r\n        <input type=\"submit\" value=\"解析\" class=\"jiexi\" onclick=\"jiexi3();\">\r\n	<div class=\"dropdown\">       \r\n        <input type=\"submit\" value=\"选项\" class=\"jiexi\" onclick=\"jiexi3();\">\r\n		<div class=\"dropdown-content\">     \r\n			<p onclick=\"jiexi1();\">路线1</p>\r\n			<p onclick=\"jiexi2();\">路线2</p>\r\n                        <p onclick=\"jiexi3();\">路线3</p>\r\n		</div>\r\n	</div>\r\n</div>\r\n<div class=\"video\">\r\n	<iframe id=\"iframe_jiexi\" src=\"https://api.sigujx.com/?url=\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"background-repeat:no-repeat ;background-size:100%100%;background-image:url(https://cbu01.alicdn.com/img/ibank/2019/694/265/11144562496.jpg)\">\r\n	</iframe>\r\n</div>\r\n\r\n<br>\r\n<p>使用方法</p>\r\n<ul>\r\n<li>打开你要看的会员视频网址(支持大部分视频网站)，将地址复制。</li>\r\n<li>粘贴到上面的输入框中，点击解析，稍等一会儿，即可观看。</li>\r\n</ul>\r\n\r\n</div>', '2020-04-26 17:20:27', '加油', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(6).jpg', '原创', '', '', '', '视频解析', '2020-04-26 17:20:27', '19', '1', '123456');
INSERT INTO `t_blog` VALUES ('7', '', '', '![](https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200424155731065-1644328125.png)\r\n\r\n![](https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200424155802628-1744403718.png)\r\n\r\n\r\n哭泣，我终于有了自己的名字！\r\n![](https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200424155900225-2033161764.png)\r\n', '2020-04-26 17:23:31', '哈哈哈', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(7).jpg', '原创', '', '', '', '妈妈再也不用担心我找激活码了', '2020-05-03 19:53:03', '29', '2', '123456');
INSERT INTO `t_blog` VALUES ('8', '', '', '<div class=\"postBody\">\r\n<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\r\n    <div class=\"clipboard-button\" id=\"copy_btn_0 \" data-clipboard-target=\"#copy_target_0\" title=\"复制代码\" style=\"padding: 4px; border-radius: 2px; text-align: right; user-select: none;\">复制代码</div><pre id=\"copy_target_0\"><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;sstream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;set&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> maxn=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> ll;\r\n \r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n	<span class=\"hljs-keyword\">int</span> n;\r\n	<span class=\"hljs-built_in\">cin</span>&gt;&gt;n;\r\n  \r\n	<span class=\"hljs-keyword\">char</span> s;\r\n	<span class=\"hljs-built_in\">cin</span>&gt;&gt;s;\r\n	getchar();    <span class=\"hljs-comment\">//gerchar()我也不知道什么时候加  ，不对的时候加一下</span>\r\n<span class=\"hljs-comment\">//	char s1[11500]; </span>\r\n<span class=\"hljs-comment\">//	cin.get(s1,11500);  //char *是cin.get(string,string.length());</span>\r\n	<span class=\"hljs-built_in\">string</span> s1;\r\n	getline(<span class=\"hljs-built_in\">cin</span>,s1);   <span class=\"hljs-comment\">// getline is  string 对象 （cin,s1)</span>\r\n<span class=\"hljs-comment\">//	</span>\r\n<span class=\"hljs-comment\">//	int len = strlen(s1);</span>\r\n<span class=\"hljs-comment\">//	</span>\r\n	\r\n<span class=\"hljs-comment\">//	int c = n-len;</span>\r\n	<span class=\"hljs-keyword\">int</span> c = n - s1.length();\r\n	<span class=\"hljs-keyword\">if</span>(c &gt; <span class=\"hljs-number\">0</span>){\r\n		\r\n		<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i &lt; c ; i++){\r\n		<span class=\"hljs-built_in\">cout</span>&lt;&lt;s; \r\n	}\r\n	\r\n	<span class=\"hljs-built_in\">cout</span>&lt;&lt;s1;\r\n	\r\n}\r\n <span class=\"hljs-keyword\">else</span>\r\n \r\n {  \r\n    <span class=\"hljs-keyword\">int</span> c1=s1.length() - n;\r\n	\r\n	<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = c1; i &lt; s1.length()  ; i++){\r\n		\r\n		<span class=\"hljs-built_in\">cout</span>&lt;&lt;s1[i];\r\n	} \r\n}\r\n	\r\n	\r\n}\r\n</code></pre>\r\n\r\n</div>\r\n<div id=\"MySignature\"></div>\r\n<div class=\"clear\"></div>\r\n<div id=\"blog_post_info_block\"><div id=\"BlogPostCategory\">\r\n    分类: \r\n            <a href=\"https://www.cnblogs.com/shenxiaodou/category/1435257.html\" target=\"_blank\">蓝桥杯</a></div>\r\n\r\n\r\n    <div id=\"blog_post_info\">\r\n<div id=\"green_channel\">\r\n        <a href=\"javascript:void(0);\" id=\"green_channel_digg\" onclick=\"DiggIt(12577807,cb_blogId,1);green_channel_success(this,\'谢谢推荐！\');\">好文要顶</a>\r\n        <a id=\"green_channel_follow\" onclick=\"follow(\'d711a1cb-bb82-42fe-0824-08d6b53ef329\');\" href=\"javascript:void(0);\">关注我</a>\r\n    <a id=\"green_channel_favorite\" onclick=\"AddToWz(cb_entryId);return false;\" href=\"javascript:void(0);\">收藏该文</a>\r\n    <a id=\"green_channel_weibo\" href=\"javascript:void(0);\" title=\"分享至新浪微博\" onclick=\"ShareToTsina()\"><img src=\"https://common.cnblogs.com/images/icon_weibo_24.png\" alt=\"\"></a>\r\n    <a id=\"green_channel_wechat\" href=\"javascript:void(0);\" title=\"分享至微信\" onclick=\"shareOnWechat()\"><img src=\"https://common.cnblogs.com/images/wechat.png\" alt=\"\"></a>\r\n</div>\r\n<div id=\"author_profile\">\r\n    <div id=\"author_profile_info\" class=\"author_profile_info\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\" target=\"_blank\"><img src=\"https://pic.cnblogs.com/face/1648896/20200315231404.png\" class=\"author_avatar\" alt=\"\"></a>\r\n        <div id=\"author_profile_detail\" class=\"author_profile_info\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\">小申同学</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followees/\">关注 - 7</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followers/\">粉丝 - 4</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"author_profile_honor\"></div>\r\n    <div id=\"author_profile_follow\">\r\n    </div>\r\n</div>\r\n<div id=\"div_digg\">\r\n    <div class=\"diggit\" onclick=\"votePost(12577807,\'Digg\')\">\r\n        <span class=\"diggnum\" id=\"digg_count\">0</span>\r\n    </div>\r\n    <div class=\"buryit\" onclick=\"votePost(12577807,\'Bury\')\">\r\n        <span class=\"burynum\" id=\"bury_count\">0</span>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div class=\"diggword\" id=\"digg_tips\">\r\n    </div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    currentDiggType = 0;\r\n</script></div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"post_next_prev\">\r\n\r\n    <a href=\"https://www.cnblogs.com/shenxiaodou/p/12574695.html\" class=\"p_n_p_prefix\">« </a> 上一篇：    <a href=\"https://www.cnblogs.com/shenxiaodou/p/12574695.html\" title=\"发布于 2020-03-26 15:22\">数列排序</a>\r\n    <br>\r\n    <a href=\"https://www.cnblogs.com/shenxiaodou/p/12587761.html\" class=\"p_n_p_prefix\">» </a> 下一篇：    <a href=\"https://www.cnblogs.com/shenxiaodou/p/12587761.html\" title=\"发布于 2020-03-28 15:53\">网络翻译</a>\r\n\r\n</div>\r\n</div>\r\n            </div>', '2020-04-26 17:25:37', '吃字符串的空格', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(8).jpg', '原创', '', '\0', '', '吃字符串的空格', '2020-04-26 17:25:37', '24', '1', '123456');
INSERT INTO `t_blog` VALUES ('9', '\0', '\0', '<div class=\"postBody\">\r\n                \r\n<div class=\"blogpost-body cnblogs-markdown\" id=\"cnblogs_post_body\">\r\n    <font size=\"5\">\r\n<h1 id=\"1、下载tomcat\">1、下载tomcat</h1>\r\n<p><a href=\"https://tomcat.apache.org/download-90.cgi\">https://tomcat.apache.org/download-90.cgi</a></p>\r\n<h1 id=\"2、直接下载安装包类型，不需要配置环境变量\">2、直接下载安装包类型，不需要配置环境变量</h1>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145137221-1477760011.png\"></p>\r\n<h1 id=\"3、下载eclipse-java-ee\">3、下载eclipse java ee</h1>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145253690-1559206069.png\"></p>\r\n<h1 id=\"4、java-ee里window-preferences\">4、java ee里window-&gt;preferences</h1>\r\n<p>搜索runtime environment<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145400722-1005969853.png\"><br>\r\n选择tomcat版本<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145414537-1736329583.png\"><br>\r\n选择jdk版本<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145430567-1972249340.png\"><br>\r\nfinished</p>\r\n<h1 id=\"5、新建一个动态网页项目\">5、新建一个动态网页项目</h1>\r\n<p>file-&gt;new-&gt;Dynamic Web Project<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145736787-1188062112.png\"><br>\r\n没有的图next就完事<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145803713-696833456.png\"></p>\r\n<h1 id=\"6、web-content建立html-或者jsp\">6、web Content建立html 或者jsp</h1>\r\n<p>右键<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145946781-1024111106.png\"></p>\r\n<p><img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415145928725-1986609410.png\"><br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415150049969-245609560.png\"><br>\r\n不行的时候配置一下端口号，停止其他tomcat运行<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415150128779-1000770089.png\"><br>\r\n将新的程序加入serve中<br>\r\n<img alt=\"\" src=\"https://img2020.cnblogs.com/blog/1648896/202004/1648896-20200415150230353-1208201229.png\"><br>\r\n成功访问</p>\r\n\r\n</font></div><font size=\"5\">\r\n<div id=\"MySignature\"></div>\r\n<div class=\"clear\"></div>\r\n<div id=\"blog_post_info_block\"><div id=\"BlogPostCategory\">\r\n    分类: \r\n            <a href=\"https://www.cnblogs.com/shenxiaodou/category/1685814.html\" target=\"_blank\">网站建设</a></div>\r\n\r\n\r\n    <div id=\"blog_post_info\">\r\n<div id=\"green_channel\">\r\n        <a id=\"green_channel_digg\" onclick=\"DiggIt(12705396,cb_blogId,1);green_channel_success(this,\'谢谢推荐！\');\" href=\"javascript:void(0);\">好文要顶</a>\r\n        <a id=\"green_channel_follow\" onclick=\"follow(\'d711a1cb-bb82-42fe-0824-08d6b53ef329\');\" href=\"javascript:void(0);\">关注我</a>\r\n    <a id=\"green_channel_favorite\" onclick=\"AddToWz(cb_entryId);return false;\" href=\"javascript:void(0);\">收藏该文</a>\r\n    <a title=\"分享至新浪微博\" id=\"green_channel_weibo\" onclick=\"ShareToTsina()\" href=\"javascript:void(0);\"><img alt=\"\" src=\"https://common.cnblogs.com/images/icon_weibo_24.png\"></a>\r\n    <a title=\"分享至微信\" id=\"green_channel_wechat\" onclick=\"shareOnWechat()\" href=\"javascript:void(0);\"><img alt=\"\" src=\"https://common.cnblogs.com/images/wechat.png\"></a>\r\n</div>\r\n<div id=\"author_profile\">\r\n    <div class=\"author_profile_info\" id=\"author_profile_info\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\" target=\"_blank\"><img class=\"author_avatar\" alt=\"\" src=\"https://pic.cnblogs.com/face/1648896/20200315231404.png\"></a>\r\n        <div class=\"author_profile_info\" id=\"author_profile_detail\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\">小申同学</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followees/\">关注 - 7</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followers/\">粉丝 - 4</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"author_profile_honor\"></div>\r\n    <div id=\"author_profile_follow\">\r\n                <a onclick=\"follow(\'d711a1cb-bb82-42fe-0824-08d6b53ef329\');return false;\" href=\"javascript:void(0);\">+加关注</a>\r\n    </div>\r\n</div>\r\n<div id=\"div_digg\">\r\n    <div class=\"diggit\" onclick=\"votePost(12705396,\'Digg\')\">\r\n        <span class=\"diggnum\" id=\"digg_count\">0</span>\r\n    </div>\r\n    <div class=\"buryit\" onclick=\"votePost(12705396,\'Bury\')\">\r\n        <span class=\"burynum\" id=\"bury_count\">0</span>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div class=\"diggword\" id=\"digg_tips\">\r\n    </div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    currentDiggType = 0;\r\n</script></div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"post_next_prev\">\r\n\r\n</div>\r\n</div>\r\n            </font></div>', '2020-04-26 17:40:28', 'https://pic.ibaotu.com/00/36/41/16A888piChI6.jpg-0.jpg!ww7002', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(9).jpg', '原创', '', '', '', 'Tomcat集成于eclipse', '2020-04-26 17:40:28', '17', '1', '123456');
INSERT INTO `t_blog` VALUES ('10', '\0', '\0', '<div class=\"postBody\">\r\n                \r\n<div class=\"blogpost-body cnblogs-markdown\" id=\"cnblogs_post_body\">\r\n    <font size=\"3\"> \r\n<h1 id=\"scroller-0\" offset=\"1\">迷宫</h1>\r\n<p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br>\r\n小明只能向上下左右四个方向移动。</p>\r\n<p>输入</p>\r\n<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br>\r\n每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br>\r\n接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br>\r\n字符的含义如下：<br>\r\n‘S’：起点<br>\r\n‘E’：终点<br>\r\n‘-’：空地，可以通过<br>\r\n‘#’：障碍，无法通过<br>\r\n输入数据保证有且仅有一个起点和终点。</p>\r\n<p>输出</p>\r\n<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>\r\n<p>样例输入</p>\r\n<div title=\"复制代码\" class=\"clipboard-button\" id=\"copy_btn_0 \" style=\"padding: 4px; border-radius: 2px; text-align: right; -ms-user-select: none;\" data-clipboard-target=\"#copy_target_0\">复制代码</div><pre id=\"copy_target_0\"><code class=\"hljs shell\">1\r\n5 5\r\n<span class=\"hljs-meta\">S-#</span><span class=\"bash\"><span class=\"hljs-comment\">##</span></span>\r\n-----\r\n<span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-comment\">#---</span></span>\r\n<span class=\"hljs-meta\">E#</span><span class=\"bash\">---</span>\r\n<span class=\"hljs-meta\">---#</span><span class=\"bash\"><span class=\"hljs-comment\">#</span></span>\r\n</code></pre>\r\n<p>样例输出</p>\r\n<div title=\"复制代码\" class=\"clipboard-button\" id=\"copy_btn_1 \" style=\"padding: 4px; border-radius: 2px; text-align: right; -ms-user-select: none;\" data-clipboard-target=\"#copy_target_1\">复制代码</div><pre id=\"copy_target_1\"><code class=\"hljs\">9\r\n</code></pre>\r\n<div title=\"复制代码\" class=\"clipboard-button\" id=\"copy_btn_2 \" style=\"padding: 4px; border-radius: 2px; text-align: right; -ms-user-select: none;\" data-clipboard-target=\"#copy_target_2\">复制代码</div><pre id=\"copy_target_2\"><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;queue&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\r\n\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> maxn=<span class=\"hljs-number\">1e3</span>+<span class=\"hljs-number\">10</span>;\r\n<span class=\"hljs-keyword\">int</span> n,m;\r\n<span class=\"hljs-keyword\">int</span> dxy[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>]={<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>};\r\n<span class=\"hljs-keyword\">char</span> mp[maxn][maxn];\r\n<span class=\"hljs-keyword\">int</span> vis[maxn][maxn];\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>{</span>\r\n	<span class=\"hljs-keyword\">int</span> x;\r\n	<span class=\"hljs-keyword\">int</span> y;\r\n	<span class=\"hljs-keyword\">int</span> level;\r\n	node(<span class=\"hljs-keyword\">int</span> xx,<span class=\"hljs-keyword\">int</span> yy,<span class=\"hljs-keyword\">int</span> llee)\r\n	{\r\n		x=xx;\r\n		y=yy;\r\n		level=llee;\r\n	}\r\n};\r\n \r\n<span class=\"hljs-built_in\">queue</span>&lt;node&gt;q;\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">check</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x,<span class=\"hljs-keyword\">int</span> y)</span></span>{\r\n	\r\n	<span class=\"hljs-keyword\">if</span>(x&lt;<span class=\"hljs-number\">0</span> || x&gt;=n || y&lt;<span class=\"hljs-number\">0</span> || y&gt;=m ||vis[x][y] ||mp[x][y]==<span class=\"hljs-string\">\'#\'</span>)\r\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x,<span class=\"hljs-keyword\">int</span> y)</span>\r\n</span>{\r\n	vis[x][y]=<span class=\"hljs-number\">1</span>;\r\n \r\n	q.push(node(x,y,<span class=\"hljs-number\">0</span>));  <span class=\"hljs-comment\">//先进队列，  </span>\r\n\r\n	<span class=\"hljs-keyword\">while</span>(!q.empty()){  <span class=\"hljs-comment\">//队列不为空 </span>\r\n	\r\n		\r\n		<span class=\"hljs-keyword\">int</span> X,Y,Z;\r\n	    node a=q.front();\r\n		X=a.x;					<span class=\"hljs-comment\">//出一个 </span>\r\n		Y=a.y;\r\n		Z=a.level;\r\n		<span class=\"hljs-keyword\">if</span>(mp[a.x][a.y]==<span class=\"hljs-string\">\'E\'</span>)   <span class=\"hljs-comment\">//终止条件 </span>\r\n		<span class=\"hljs-keyword\">return</span> Z;\r\n		q.pop();\r\n		<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++){  <span class=\"hljs-comment\">//循环4个方向</span>\r\n		\r\n		<span class=\"hljs-keyword\">int</span> dx=a.x+dxy[i][<span class=\"hljs-number\">0</span>];\r\n		<span class=\"hljs-keyword\">int</span> dy=a.y+dxy[i][<span class=\"hljs-number\">1</span>]; \r\n		\r\n		<span class=\"hljs-keyword\">if</span>(check(dx,dy)){\r\n			vis[dx][dy]=<span class=\"hljs-number\">1</span>;\r\n			\r\n			q.push(node(dx,dy,a.level+<span class=\"hljs-number\">1</span>));  <span class=\"hljs-comment\">//满足条件加入节点 </span>\r\n		}\r\n		 \r\n		\r\n		\r\n		\r\n	}\r\n}\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n	<span class=\"hljs-keyword\">int</span> k;\r\n	<span class=\"hljs-built_in\">cin</span>&gt;&gt;k;\r\n	<span class=\"hljs-keyword\">while</span>(k--){\r\n \r\n	<span class=\"hljs-built_in\">cin</span>&gt;&gt;n&gt;&gt;m;\r\n	<span class=\"hljs-keyword\">int</span> nn,mm;\r\n	<span class=\"hljs-built_in\">memset</span>(mp,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(mp));\r\n	<span class=\"hljs-built_in\">memset</span>(vis,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(vis));\r\n	<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\r\n		<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;m;j++){\r\n			\r\n			<span class=\"hljs-built_in\">cin</span>&gt;&gt;mp[i][j];\r\n			<span class=\"hljs-keyword\">if</span>(mp[i][j]==<span class=\"hljs-string\">\'S\'</span>)\r\n			{\r\n				nn=i;\r\n				mm=j;\r\n				\r\n			}\r\n		}\r\n	}\r\n	\r\n	<span class=\"hljs-built_in\">cout</span>&lt;&lt;bfs(nn,mm);\r\n	\r\n	\r\n	\r\n	\r\n	}\r\n	\r\n}\r\n\r\n\r\n</code></pre>\r\n\r\n</font></div><font size=\"3\">\r\n<div id=\"MySignature\"></div>\r\n<div class=\"clear\"></div>\r\n<div id=\"blog_post_info_block\"><div id=\"BlogPostCategory\">\r\n    分类: \r\n            <a href=\"https://www.cnblogs.com/shenxiaodou/category/1435257.html\" target=\"_blank\">蓝桥杯</a></div>\r\n\r\n\r\n    <div id=\"blog_post_info\">\r\n<div id=\"green_channel\">\r\n        <a id=\"green_channel_digg\" onclick=\"DiggIt(12557872,cb_blogId,1);green_channel_success(this,\'谢谢推荐！\');\" href=\"javascript:void(0);\">好文要顶</a>\r\n        <a id=\"green_channel_follow\" onclick=\"follow(\'d711a1cb-bb82-42fe-0824-08d6b53ef329\');\" href=\"javascript:void(0);\">关注我</a>\r\n    <a id=\"green_channel_favorite\" onclick=\"AddToWz(cb_entryId);return false;\" href=\"javascript:void(0);\">收藏该文</a>\r\n    <a title=\"分享至新浪微博\" id=\"green_channel_weibo\" onclick=\"ShareToTsina()\" href=\"javascript:void(0);\"><img alt=\"\" src=\"https://common.cnblogs.com/images/icon_weibo_24.png\"></a>\r\n    <a title=\"分享至微信\" id=\"green_channel_wechat\" onclick=\"shareOnWechat()\" href=\"javascript:void(0);\"><img alt=\"\" src=\"https://common.cnblogs.com/images/wechat.png\"></a>\r\n</div>\r\n<div id=\"author_profile\">\r\n    <div class=\"author_profile_info\" id=\"author_profile_info\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\" target=\"_blank\"><img class=\"author_avatar\" alt=\"\" src=\"https://pic.cnblogs.com/face/1648896/20200315231404.png\"></a>\r\n        <div class=\"author_profile_info\" id=\"author_profile_detail\">\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/\">小申同学</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followees/\">关注 - 7</a><br>\r\n            <a href=\"https://home.cnblogs.com/u/shenxiaodou/followers/\">粉丝 - 4</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"author_profile_honor\"></div>\r\n    <div id=\"author_profile_follow\">\r\n                <a onclick=\"follow(\'d711a1cb-bb82-42fe-0824-08d6b53ef329\');return false;\" href=\"javascript:void(0);\">+加关注</a>\r\n    </div>\r\n</div>\r\n<div id=\"div_digg\">\r\n    <div class=\"diggit\" onclick=\"votePost(12557872,\'Digg\')\">\r\n        <span class=\"diggnum\" id=\"digg_count\">0</span>\r\n    </div>\r\n    <div class=\"buryit\" onclick=\"votePost(12557872,\'Bury\')\">\r\n        <span class=\"burynum\" id=\"bury_count\">0</span>\r\n    </div>\r\n    <div class=\"clear\"></div>\r\n    <div class=\"diggword\" id=\"digg_tips\">\r\n    </div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    currentDiggType = 0;\r\n</script></div>\r\n    <div class=\"clear\"></div>\r\n    <div id=\"post_next_prev\">\r\n\r\n    <a class=\"p_n_p_prefix\" href=\"https://www.cnblogs.com/shenxiaodou/p/12557844.html\">« </a> 上一篇：    <a title=\"发布于 2020-03-24 11:25\" href=\"https://www.cnblogs.com/shenxiaodou/p/12557844.html\">typedef struct</a>\r\n    <br>\r\n    <a class=\"p_n_p_prefix\" href=\"https://www.cnblogs.com/shenxiaodou/p/12561807.html\">» </a> 下一篇：    <a title=\"发布于 2020-03-24 20:51\" href=\"https://www.cnblogs.com/shenxiaodou/p/12561807.html\">vector</a>\r\n\r\n</div>\r\n</div>\r\n            </font></div>', '2020-04-26 17:42:43', '哈哈哈哈哈哈哈哈哈哈', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(10).jpg', '原创', '', '', '', '嘎嘎嘎', '2020-04-26 17:42:43', '23', '2', '123456');
INSERT INTO `t_blog` VALUES ('14', '', '', 'IDEA运行SpringBoot项目控制台输出颜色高亮的日志\r\n\r\nxiongtianci.com 2019-04-16 16:43:18  3187  收藏\r\n展开\r\n问题\r\n有时IDEA运行SpringBoot项目，控制台Console输出的日志颜色为白色的\r\n\r\n解决\r\n配置启动类application的相关参数，添加：-Dspring.output.ansi.enabled=ALWAYS\r\n————————————————\r\n版权声明：本文为CSDN博主「xiongtianci.com」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\r\n原文链接：https://blog.csdn.net/tian_ci/java/article/details/89336629', '2020-05-11 12:21:00', 'IDEA运行SpringBoot项目控制台输出颜色高亮的日志', 'https://img-blog.csdnimg.cn/20190416160105555.png', '', '', '', '', 'IDEA运行SpringBoot项目控制台输出颜色高亮的日志', '2020-05-11 12:21:00', '19', '1', '123456');
INSERT INTO `t_blog` VALUES ('15', '', '', '#今天github遇到困难了\r\nhttp://szq.szq666.xyz/index.php?share/file&user=1&sid=cEYymBtC\r\n[![](http://szq.szq666.xyz/index.php?share/file&user=1&sid=cEYymBtC)](http://szq.szq666.xyz/index.php?share/file&user=1&sid=cEYymBtC)\r\n##一、我们应该先从远程仓库git，然后再进行操作，无法直接pull下面有时候，如果本地没的话\r\n##二、关于git 的命令\r\n	c++\r\n	git add .\r\n	git commit -m \"message\"\r\n	git push \r\n', '2020-05-14 16:24:49', 'git github', 'http://szq.szq666.xyz/index.php?share/fileProxy&user=1&sid=cEYymBtC', '', '', '', '', 'Git第二天的瓶颈', '2020-05-14 16:24:49', '23', '8', '123456');
INSERT INTO `t_blog` VALUES ('16', '\0', '\0', '#2020年05月14日来自成电学姐的经验分享\r\n\r\n2020-05-14 23:55:08 星期四\r\n###今天收获满满是一个特别可爱，温柔、认真的学姐给我分享了她是如何推免到成电的，还帮我在成电官网上寻找导师的联系方式，特别有耐心，我很感激这位学姐，再次这里说一声感谢！\r\n\r\n\r\n成电学姐 ： 2020/5/14 21:48:17  \r\n\r\n我们已经是好友啦，一起来聊天吧！  \r\n\r\n我 ： 2020/5/14 21:48:39   \r\n学姐你好，我是学弟  2017级网络工程 申振强   \r\n成电学姐 ： 2020/5/14 21:48:50   学弟你好   \r\n成电学姐 ： 2020/5/14 21:49:01   \r\n请问你想了解哪方面的信息   \r\n我 ： 2020/5/14 21:49:30   \r\n听说学姐是推免的，我想了解关于推免的一些信息   \r\n成电学姐 ： 2020/5/14 21:50:46   \r\n是的   \r\n成电学姐 ： 2020/5/14 21:50:58  \r\n\r\n就是有没有具体的想了解的  \r\n成电学姐 ： 2020/5/14 21:51:12  \r\n还是说你也不知道从哪方面说起？  \r\n成电学姐 ： 2020/5/14 21:51:25  \r\n要不我就我的经历给你说一下  \r\n我 ： 2020/5/14 21:51:37  \r\n好啊好啊  \r\n我 ： 2020/5/14 21:53:55  \r\n学弟感觉考研太难，于是就想走保研。也想上比较好点的学校。实力也是有的，想聆听一下学姐的经历，来给学弟丰富一下阅历。  \r\n成电学姐 ： 2020/5/14 21:56:54  \r\n如果你前三年是专业前一二，你可以在今年暑假的时候给导师发邮件，先说明一下你前三年的专业排名，邮件里面附上前三年的成绩表和各种有价值的证书，问问老师有没有充足的名额，如果你是第一名的话基本就会被推免，你就需要和老师说你等到拿到推免名单的时候在告诉老师，暑假联系老师的时候，问问可不可以去学校找老师一趟 见面聊聊，如果约见了，老师对你印象挺好，准备要你，那你就等到九月份推免名单出来的时候给老师说一下你被推免了，然后看看老师在确定一下老师是不是确定要你了  \r\n成电学姐 ： 2020/5/14 21:58:05\r\n这大概就是暑假要准备的内容  \r\n我 ： 2020/5/14 21:58:42\r\n哇  提前给老师发邮件是不是就有点先提前走的意思啦   好给力呀  \r\n我 ： 2020/5/14 21:59:04\r\n学姐我也想去成电 emmm  \r\n成电学姐 ： 2020/5/14 21:59:10\r\n就是那找好心仪的学校，去学校研究生官网查看导师信息，你了解了他的研究方向，觉得很喜欢，就可以给他发送邮件  \r\n我 ： 2020/5/14 21:59:24\r\n学姐你是什么专业的啊   学姐  \r\n我 ： 2020/5/14 22:00:06\r\n你之前也是在研究生官网查看的吗？  \r\n成电学姐 ： 2020/5/14 22:00:08\r\n我是保研名单出来了之后才发的邮件，因为我是第二，当时可能保不了，推荐名单前一天我还在准备考研  \r\n成电学姐 ： 2020/5/14 22:00:19\r\n我之前啥都没干  \r\n成电学姐 ： 2020/5/14 22:00:24\r\n没资格干  \r\n我 ： 2020/5/14 22:00:43\r\n我去，学姐太奋斗了。好厉害学姐，你们当时保几个？  \r\n成电学姐 ： 2020/5/14 22:00:44\r\n我是电子与通信工程，专硕  \r\n成电学姐 ： 2020/5/14 22:01:24\r\n我专业按照以往是保一个，我那一届我有点幸运，多一个名额，轮到我们专业了  \r\n成电学姐 ： 2020/5/14 22:01:29\r\n然后轮到我头上了  \r\n我 ： 2020/5/14 22:01:33\r\n虽然我现在对专硕学硕有点迷茫，但是先不讨论这个。  \r\n我 ： 2020/5/14 22:01:38\r\n学姐 是幸运+实力  \r\n成电学姐 ： 2020/5/14 22:03:05\r\n专硕学硕的培养方案基本一样，目前我知道的就是专硕学硕都需要发表文章才能毕业，学硕修的学分比专硕少几分  \r\n成电学姐 ： 2020/5/14 22:03:17\r\n你们这一届学费涨了  \r\n成电学姐 ： 2020/5/14 22:04:07\r\n你可以了解一下成电的学费，据说涨到一万五了  \r\n我 ： 2020/5/14 22:04:29\r\n我们之前有保研一个 的，也有两个的。但是我比赛挺多的，大部分老师，都挺熟的，暑假在努力复习，应该是可以的我感觉  \r\n我 ： 2020/5/14 22:04:30\r\n哇塞  \r\n我 ： 2020/5/14 22:04:43\r\n专硕 贵学硕贵啊  \r\n成电学姐 ： 2020/5/14 22:04:58\r\n因为我暑假没有发邮件，所以九月份再发邮件的时候，有些导师名额已经满了，建议你提前发邮件，不要等到名单出来才发  \r\n我 ： 2020/5/14 22:05:14\r\n嗯呐 懂啦，。  \r\n我 ： 2020/5/14 22:05:34\r\n学姐当时有没有直博生这一说法  \r\n成电学姐 ： 2020/5/14 22:06:14\r\n直博生好像是需要和导师沟通的吧  \r\n成电学姐 ： 2020/5/14 22:06:39\r\n就是你想硕博连读的话需要和导师说一下吧  \r\n成电学姐 ： 2020/5/14 22:07:04  \r\n我们那届西电有个同学给导师说硕博连读  \r\n成电学姐 ： 2020/5/14 22:07:20\r\n你这个直博生我确实不太清楚  \r\n我 ： 2020/5/14 22:07:46\r\n硕博连读 跟直博生 我也不太清楚  \r\n我 ： 2020/5/14 22:08:04\r\n我就知道，有一个是没有硕士毕业证 然后读的年数少  \r\n我 ： 2020/5/14 22:08:12\r\n\r\n成电学姐 ： 2020/5/14 22:09:46\r\n这个你到时和导师联系的时候可以问问  \r\n成电学姐 ： 2020/5/14 22:10:25\r\n你给导师发消息可以多发几个，因为有时候可能没有人回你  \r\n我 ： 2020/5/14 22:10:32\r\n嗯呐    \r\n成电学姐 ： 2020/5/14 22:10:32\r\n多发不是群发  \r\n成电学姐 ： 2020/5/14 22:10:42\r\n群发可以被发现  \r\n我 ： 2020/5/14 22:10:42\r\n嗯嗯  \r\n成电学姐 ： 2020/5/14 22:11:17\r\n嗯，推免之前联系好导师可以去学校找老师面谈  \r\n我 ： 2020/5/14 22:11:37\r\n哈哈好的学姐  \r\n成电学姐 ： 2020/5/14 22:11:38\r\n他可能会问你专业课内容或者和他相关的内容  \r\n我 ： 2020/5/14 22:11:38\r\n  \r\n我 ： 2020/5/14 22:11:47\r\n嗯呐  \r\n我 ： 2020/5/14 22:11:57\r\n学姐这官网的导师在哪里找的  \r\n成电学姐 ： 2020/5/14 22:11:58  \r\n你可以在见面之前学习学习之前的知识  \r\n成电学姐 ： 2020/5/14 22:12:21\r\n我看看  \r\n成电学姐 ： 2020/5/14 22:12:26\r\n我有点忘记了  \r\n成电学姐 ： 2020/5/14 22:12:28\r\n我找找  \r\n我 ： 2020/5/14 22:12:35\r\n好的，麻烦学姐啦  \r\n成电学姐 ： 2020/5/14 22:17:33\r\n你打开电脑  \r\n成电学姐 ： 2020/5/14 22:17:42\r\n收索电子科技大学官网  \r\n我 ： 2020/5/14 22:17:57\r\n打开啦  \r\n成电学姐 ： 2020/5/14 22:18:06\r\n进去，点击学院部门  \r\n成电学姐 ： 2020/5/14 22:18:13\r\n点击学院  \r\n我 ： 2020/5/14 22:18:21\r\n?    \r\n成电学姐 ： 2020/5/14 22:18:58\r\n你点开通信  \r\n成电学姐 ： 2020/5/14 22:19:14\r\n信息与工程学院  \r\n我 ： 2020/5/14 22:19:25\r\n\r\n成电学姐 ： 2020/5/14 22:20:39\r\n你用的啥浏览器  \r\n成电学姐 ： 2020/5/14 22:20:47\r\n咋和我不一样页面  \r\n我 ： 2020/5/14 22:21:00\r\nGoogle 程序员专门浏览器  \r\n我 ： 2020/5/14 22:21:03\r\n你用的那个  \r\n我 ： 2020/5/14 22:21:04\r\n我还  \r\n我 ： 2020/5/14 22:21:05\r\n换  \r\n成电学姐 ： 2020/5/14 22:21:22\r\n谷歌浏览器  \r\n我 ： 2020/5/14 22:21:37\r\n我也是 啊  \r\n成电学姐 ： 2020/5/14 22:21:38\r\n我给你截一下屏  \r\n成电学姐 ： 2020/5/14 22:21:45\r\n你进的是官网吗  \r\n我 ： 2020/5/14 22:22:05\r\n我进错了哈哈  \r\n我 ： 2020/5/14 22:22:11\r\n  \r\n成电学姐 ： 2020/5/14 22:22:12\r\n  \r\n成电学姐 ： 2020/5/14 22:22:35\r\n对  \r\n成电学姐 ： 2020/5/14 22:22:36\r\n这个  \r\n我 ： 2020/5/14 22:22:40\r\n  \r\n我 ： 2020/5/14 22:22:42\r\n这里面对吧  \r\n成电学姐 ： 2020/5/14 22:23:15\r\n你点开一个学院，点击科学研究  \r\n成电学姐 ： 2020/5/14 22:23:21\r\n里面有研究团队  \r\n我 ： 2020/5/14 22:23:36\r\n  \r\n成电学姐 ： 2020/5/14 22:23:47\r\n科学研究里面都可以看看  \r\n成电学姐 ： 2020/5/14 22:23:49\r\n对的  \r\n我 ： 2020/5/14 22:23:51\r\n选一个自己喜欢的对吧  \r\n成电学姐 ： 2020/5/14 22:23:56\r\n你可以看看各团队介绍  \r\n我 ： 2020/5/14 22:24:20\r\n嗯呐 学姐你好认真呀 ，感谢你  \r\n我 ： 2020/5/14 22:24:35\r\n学姐你是哪个团队的  \r\n成电学姐 ： 2020/5/14 22:24:36\r\n我看看那个导师名单在哪找  \r\n成电学姐 ： 2020/5/14 22:24:54\r\n我之前有一溜名单，但是我忘记了  \r\n成电学姐 ： 2020/5/14 22:24:57\r\n我找找  \r\n我 ： 2020/5/14 22:25:02\r\n好  \r\n成电学姐 ： 2020/5/14 22:25:04\r\n我是电院的  \r\n成电学姐 ： 2020/5/14 22:25:17\r\n是信通下面那个院  \r\n成电学姐 ： 2020/5/14 22:25:40\r\n我是电子科学与工程学院      \r\n成电学姐 ： 2020/5/14 22:26:11\r\n电磁辐射与散射团队    \r\n成电学姐 ： 2020/5/14 22:26:34\r\n我教你找导师名单  \r\n成电学姐 ： 2020/5/14 22:26:41\r\n电子科技大学官网首页  \r\n成电学姐 ： 2020/5/14 22:26:50\r\n你返回到首页  \r\n我 ： 2020/5/14 22:27:08\r\n  \r\n我 ： 2020/5/14 22:27:16\r\n  \r\n成电学姐 ： 2020/5/14 22:27:31\r\n有个招生就业，点击研究生招生，然后上面有个导师介绍  \r\n成电学姐 ： 2020/5/14 22:27:57\r\n找到了吗  \r\n我 ： 2020/5/14 22:28:11\r\n我怎么感觉这比华水的网页好深啊   \r\n我 ： 2020/5/14 22:28:13\r\n找到了  \r\n我 ： 2020/5/14 22:28:21\r\n  \r\n成电学姐 ： 2020/5/14 22:28:23\r\n  \r\n成电学姐 ： 2020/5/14 22:28:33\r\n对  \r\n成电学姐 ： 2020/5/14 22:28:39\r\n这是导师名单  \r\n成电学姐 ： 2020/5/14 22:28:44\r\n你可以点进去看看  \r\n我 ： 2020/5/14 22:28:53\r\n  \r\n我 ： 2020/5/14 22:28:  \r\n嗯有详细的介绍  \r\n成电学姐 ： 2020/5/14 22:29:21\r\n对，那里有导师信息  \r\n成电学姐 ： 2020/5/14 22:30:27\r\n你也可以点击一个学院之后看师资队伍，点击下面的教师名录  \r\n成电学姐 ： 2020/5/14 22:30:37\r\n都可以 你喜欢哪种就来哪种  \r\n成电学姐 ： 2020/5/14 22:30:40\r\n  \r\n我 ： 2020/5/14 22:30:40\r\n研究 ，然后选择一个适合自己的，然后如果导师看中我了，我准备感兴趣的东西，然后开始学习 是 吧  \r\n我 ： 2020/5/14 22:30:44\r\n  \r\n我 ： 2020/5/14 22:30:53\r\n这导师都是重复的，只不过分类不同对吧  \r\n成电学姐 ： 2020/5/14 22:31:55\r\n如果暑假你发邮件，导师愿意让你找他约见，你就可以看书学习了  \r\n成电学姐 ： 2020/5/14 22:32:02\r\n什么导师重复  \r\n我 ： 2020/5/14 22:32:38\r\n就是说不同的方法可以找到同一个老师\r\n你喜欢哪种就来哪种  \r\n我 ： 2020/5/14 22:32:54\r\n我已经了解学姐高深的技能啦， 找导师  \r\n成电学姐 ： 2020/5/14 22:33:36\r\n嗯，是的，不同的找导师的方法  \r\n成电学姐 ： 2020/5/14 22:33:40\r\n都可以  \r\n成电学姐 ： 2020/5/14 22:34:03\r\n你可以先看看团队介绍  \r\n我 ： 2020/5/14 22:34:14\r\n我要写我的博客记录一下，  今天学姐的知识点有点多 哈哈  \r\n我 ： 2020/5/14 22:34:24\r\n嗯嗯  \r\n成电学姐 ： 2020/5/14 22:34:31\r\n然后去看看这个团队的导师哪个研究方向你喜欢  \r\n成电学姐 ： 2020/5/14 22:34:43\r\n博客是什么？没用过  \r\n我 ： 2020/5/14 22:35:06\r\n学姐我现在是网络工程 ，但是我喜欢  \r\n我 ： 2020/5/14 22:35:07\r\nhttps://www.cnblogs.com/shenxiaodou/  \r\n我 ： 2020/5/14 22:35:23\r\n软件开发一类的，我可以不用去找我专业名称吧  \r\n成电学姐 ： 2020/5/14 22:35:43\r\n软件一般下信通学院  \r\n我 ： 2020/5/14 22:35:46\r\n我们学的有点杂，软件开发也学了，一半一半吧  \r\n我 ： 2020/5/14 22:36:01\r\n软件一般下信通学院   ？  \r\n成电学姐 ： 2020/5/14 22:36:01\r\n硬件在电院  \r\n我 ： 2020/5/14 22:36:15\r\n噢噢  \r\n成电学姐 ： 2020/5/14 22:36:53\r\n现在分了，把电院的软件分在了信通院，但是电院也有一部分软件吧，现在软硬基本不分家  \r\n我 ： 2020/5/14 22:37:23\r\n 我应该在这里面筛选筛选看看    \r\n成电学姐 ： 2020/5/14 22:37:26\r\n你要是喜欢软件，多去信通学院看看  \r\n我 ： 2020/5/14 22:37:48\r\n信通还有点不太习惯呢， 华水是信工  \r\n我 ： 2020/5/14 22:37:51\r\n好嘞好嘞  \r\n成电学姐 ： 2020/5/14 22:37:58\r\n我只知道信通学院和电院比较强  \r\n成电学姐 ： 2020/5/14 22:38:04\r\n其他学院不了解  \r\n成电学姐 ： 2020/5/14 22:38:23\r\n信通就是信息与通信工程学院  \r\n成电学姐 ： 2020/5/14 22:38:56\r\n你多看看多找找准没错  \r\n我 ： 2020/5/14 22:39:02\r\n那就是华水的信工呗， 信工也是信息与通信工程在一前，现在被拆成物电和信工啦  \r\n我 ： 2020/5/14 22:39:20\r\n好的学姐，我多找找，以后有问题还来找你哈  \r\n成电学姐 ： 2020/5/14 22:39:31\r\n嗯，好的  \r\n我 ： 2020/5/14 22:39:58\r\n辛苦啦学姐！！！  \r\n成电学姐 ： 2020/5/14 22:39:58\r\n具体成电的信通不了解  \r\n成电学姐 ： 2020/5/14 22:40:03\r\n不客气  \r\n成电学姐 ： 2020/5/14 22:40:17\r\n那我退下了  \r\n我 ： 2020/5/14 22:40:45\r\n好的，学姐，等我到时候上岸了 一定要请学姐吃大餐 ！  \r\n我 ： 2020/5/14 22:40:54\r\n学姐早点休息吧   \r\n成电学姐 ： 2020/5/14 22:41:02\r\n不客气  \r\n成电学姐 ： 2020/5/14 22:41:06\r\n晚安  \r\n', '2020-05-14 23:56:03', '2020年05月14日来自成电学姐的经验分享', 'http://shenxiaodou.jyzero.club/-7b4cf233224c9c19.jpg', '', '', '', '\0', '2020年05月14日来自成电学姐的经验分享', '2020-05-15 00:02:40', '33', '9', '123456');
INSERT INTO `t_blog` VALUES ('17', '\0', '', '#昨日把Linux shell实验做了一下\r\n\r\n总价一下比较实用的命令\r\n\r\n```Linux\r\ncat 命令后面可以直接跟/目录/目录/文件 \r\n就可以看到其中的内容了\r\n\r\nwhoami 是查看当前用户的名字，是不是特别通俗易懂\r\n\r\nid -u 是查看 当前用户的UID的，root 的UID是0\r\n\r\ngrep my /etc/passwd  这个是查询my在passwd文件下是否存在这个\r\n\r\ngrep my /etc/passwd | cat  这个是Linux管道，把前后联系在一起，前者的输出可以是后者的输入\r\n\r\nfind . -name “*.sh.swp” 寻找文件的命令  .代表的是当前目录以及子目录  \r\n\r\nfor((i =1;i<=10;i++));\r\ndo\r\necho $(expr $i \\* 3 +1);\r\ndone\r\n\r\nvar=$(id -u)这个给变量赋值是这样的 必须要连写\r\n$(命令)\r\n\r\nA=2,B=5\r\nSTL=$[$A+$B]\r\necho $STL  答案是7\r\n\r\n\r\necho $STL > MYFILE  这个意思是将STL中的内容重定向到MYFILE文件当中\r\n```', '2020-05-18 09:57:22', 'LINUX 进阶命令', 'http://szq.szq666.xyz/index.php?share/fileProxy&user=1&sid=EXWRfhZx', '原创', '', '', '\0', 'Linux 做shell命令遇到的一些问题', '2020-05-18 10:37:22', '28', '6', '123456');
INSERT INTO `t_blog` VALUES ('18', '\0', '\0', 'NPM 使用介绍\r\nNPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\r\n\r\n允许用户从NPM服务器下载别人编写的第三方包到本地使用。\r\n允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\r\n允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\r\n由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 \"npm -v\" 来测试是否成功安装。命令如下，出现版本提示表示安装成功:\r\n\r\nNode.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时。\r\nhttps://nodejs.org/zh-cn/', '2020-05-19 11:36:07', 'Node.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时。', 'https://nodejs.org/static/images/logo.svg', '原创', '', '', '', 'VUE+NODE.JS+NPM+ECHARTS', '2020-05-19 11:44:26', '26', '16', '123456');
INSERT INTO `t_blog` VALUES ('20', '', '', '今天的整体搭建算是完成了一个体系让我对springboot前后端的衔接更加充分。\r\n>刚开始从dao层开始，dao层模仿就写了一句话\r\n-\r\n!-然后就是service类，定义了方法。对分页以及查询、更新、保存一目了然\r\n\r\n>>接下来是control层这里调用service层的方法，然后把数据返回到前端，通过model.setattribute,前端是通过EL表达式从中取值，中间用了th模板，特别好用，前端还有脸 semantic语法，搭建的很漂亮。\r\n\r\n##代码调适能力也提高了一层，通过springboot输出的信息来查看\r\n\r\n以后在搭建之前要有构思，要不然不知道需要有什么东西，这是特别麻烦的，明天准备学习一下vue.js和echarts这两个前端框架和可视化。', '2020-05-19 22:53:48', '今天的整体搭建算是完成了一个体系让我对springboot前后端的衔接更加充分。', 'https://cn.vuejs.org/images/logo.png', '原创', '', '', '', '网站博客的进阶', '2020-07-25 10:16:11', '28', '6', '123456');
INSERT INTO `t_blog` VALUES ('21', '', '\0', '#一直使用的是服务器来调试程序，对于开发人员每一次都需要去部署到服务器上略有些麻烦。\r\n\r\n>有几日伙伴用了IPV6，但是由于没有公网，IPV6也很麻烦，昨天又一伙伴介绍了内网穿透\r\n查看没有多少，于是就运用cpolar来进行内网穿透，步骤特别简单，内网穿透的下载速率是300kb/s这个速度达到了服务器的3倍，效果还是蛮好的，方便快捷。\r\n\r\n于是这就可以在自己的电脑上搭建一个本地可道云，随时随地可以访问，当放一些资料时候拿取比较方便，或者在网吧我们就可以写代码了，是不是很nice。再也不会为忘记实验报告而发愁了hhhhh。', '2020-06-01 21:15:23', '实现内网穿透的霸气！', 'https://www.cpolar.com/wp-content/uploads/2018/11/normal-logo-2.png', '原创', '', '', '', '内网穿透', '2020-06-01 21:15:23', '28', '13', '123456');
INSERT INTO `t_blog` VALUES ('22', '', '\0', '一：为什么要学多线程\r\n>1、应付面试 ：多线程几乎是面试中必问的题，所以掌握一定的基础知识是必须的。\r\n2、了解并发编程：实际工作中很少写多线程的代码，这部分代码一般都被人封装起来了，在业务中使用多线程的机会也不是很多(看具体项目)，虽然代码中很少会自己去创建线程，但是实际环境中每行代码却都是并行执行的，同一时刻大量请求同一个接口，并发可能会产生一些问题，所以也需要掌握一定的并发知识\r\n\r\n二：进程与线程\r\n\r\n1. 进程\r\n进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。\r\n\r\n2. 线程\r\n线程是一条执行路径，是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。\r\n\r\n一个正在运行的软件(如迅雷)就是一个进程，一个进程可以同时运行多个任务( 迅雷软件可以同时下载多个文件，每个下载任务就是一个线程), 可以简单的认为进程是线程的集合。\r\n\r\n线程是一条可以执行的路径。多线程就是同时有多条执行路径在同时(并行)执行。\r\n\r\n3. 进程与线程的关系\r\n一个程序就是一个进程，而一个程序中的多个任务则被称为线程。进程是表示资源分配的基本单位，又是调度运行的基本单位。，亦即执行处理机调度的基本单位。 进程和线程的关系：\r\n\r\n一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程是操作系统可识别的最小执行和调度单位。\r\n\r\n资源分配给进程，同一进程的所有线程共享该进程的所有资源。同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量，即每个线程都有自己的堆栈和局部变量。\r\n\r\n处理机分给线程，即真正在处理机上运行的是线程。\r\n\r\n线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。\r\n\r\n如果把上课的过程比作进程，把老师比作CPU，那么可以把每个学生比作每个线程，所有学生共享这个教室(也就是所有线程共享进程的资源)，上课时学生A向老师提出问题，老师对A进行解答，此时可能会有学生B对老师的解答不懂会提出B的疑问(注意：此时可能老师还没有对A同学的问题解答完毕)，此时老师又向学生B解惑，解释完之后又继续回答学生A的问题，同一时刻老师只能向一个学生回答问题(即：当多个线程在运行时，同一个CPU在某一个时刻只能服务于一个线程，可能一个线程分配一点时间，时间到了就轮到其它线程执行了，这样多个线程在来回的切换)\r\n\r\n4. 为什么要使用多线程\r\n多线程可以提高程序的效率。\r\n\r\n实际生活案例：村长要求喜洋洋在一个小时内打100桶水，可以喜洋洋一个小时只能打25桶水，如果这样就需要4个小时才能完成任务，为了在一个小时能够完成，喜洋洋就请美洋洋、懒洋洋、沸洋洋，来帮忙，这样4只羊同时干活，在一小时内完成了任务。原本用4个小时完成的任务现在只需要1个小时就完成了，如果把每只羊看做一个线程，多只羊即多线程可以提高程序的效率。\r\n\r\n5. 多线程应用场景\r\n一般线程之间比较独立，互不影响\r\n一个线程发生问题，一般不影响其它线程\r\n \r\n \r\n三：多线程的实现方式\r\n1. 顺序编程\r\n```Java\r\npublic class Main {\r\n    // 顺序编程 吃喝示例：当吃饭吃不完的时候，是不能喝酒的，只能吃完晚才能喝酒\r\n    public static void main(String[] args) throws Exception {\r\n		// 先吃饭再喝酒\r\n        eat();\r\n        drink();\r\n    }\r\n\r\n    private static void eat() throws Exception {\r\n        System.out.println(\"开始吃饭?...\\t\" + new Date());\r\n        Thread.sleep(5000);\r\n        System.out.println(\"结束吃饭?...\\t\" + new Date());\r\n    }\r\n\r\n    private static void drink() throws Exception {\r\n        System.out.println(\"开始喝酒?️...\\t\" + new Date());\r\n        Thread.sleep(5000);\r\n        System.out.println(\"结束喝酒?...\\t\" + new Date());\r\n    }\r\n}\r\n```\r\n2. 并发编程\r\n并发编程：多个任务可以同时做，常用与任务之间比较独立，互不影响。\r\n线程上下文切换：\r\n同一个时刻一个CPU只能做一件事情，即同一时刻只能一个线程中的部分代码，假如有两个线程，Thread-0和Thread-1，刚开始CPU说Thread-0你先执行，给你3毫秒时间，Thread-0执行了3毫秒时间，但是没有执行完，此时CPU会暂停Thread-0执行并记录Thread-0执行到哪行代码了，当时的变量的值是多少，然后CPU说Thread-1你可以执行了，给你2毫秒的时间，Thread-1执行了2毫秒也没执行完，此时CPU会暂停Thread-1执行并记录Thread-1执行到哪行代码了，当时的变量的值是多少，此时CPU又说Thread-0又该你，这次我给你5毫秒时间，去执行吧，此时CPU就找出上次Thread-0线程执行到哪行代码了，当时的变量值是多少，然后接着上次继续执行，结果用了2毫秒就Thread-0就执行完了，就终止了，然后CPU说Thread-1又轮到你，这次给你4毫秒，同样CPU也会先找出上次Thread-1线程执行到哪行代码了，当时的变量值是多少，然后接着上次继续开始执行，结果Thread-1在4毫秒内也执行结束了，Thread-1也结束了终止了。CPU在来回改变线程的执行机会称之为线程上下文切换。\r\n \r\n```Java\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n	    // 一边吃饭一边喝酒\r\n        new EatThread().start();\r\n        new DrinkThread().start();\r\n    }\r\n}\r\n\r\nclass EatThread extends Thread{\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"开始吃饭?...\\t\" + new Date());\r\n        try {\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println(\"结束吃饭?...\\t\" + new Date());\r\n    }\r\n}\r\n\r\nclass DrinkThread extends Thread {\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"开始喝酒?️...\\t\" + new Date());\r\n        try {\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println(\"结束喝酒?...\\t\" + new Date());\r\n    }\r\n}\r\n\r\n```', '2020-06-01 23:40:57', '利用线程', 'https://img-blog.csdn.net/20180803160520523', '原创', '', '', '', '多线程(一)：创建线程和线程的常用方法', '2020-06-01 23:43:02', '62', '6', '123456');
INSERT INTO `t_blog` VALUES ('23', '', '\0', '2020年上半年重要赛事！\r\n>计算机设计大赛\r\n网络技术大赛\r\n华彩杯\r\n简历杯大赛\r\n互联网+\r\n给导师发邮件\r\n\r\n计算机设计大赛由于人数仅限3人，所以未能参加。\r\n\r\n准备好好捯饬网络技术大赛，学校大部分都是一般的学校，感觉准备好能获奖。\r\n\r\n还有就是华彩杯\r\n\r\n简历大赛\r\n\r\n导师邮件未能回复我，可能由于现在是答辩时间太忙没时间看，或许是自身太菜hh。 加油加油加油！！！', '2020-06-02 22:27:49', '加油加油加油！！！', 'https://dss1.baidu.com/70cFfyinKgQFm2e88IuM_a/forum/pic/item/79f0f736afc37931b4c69c2ae7c4b74543a91102.jpg', '原创', '', '\0', '\0', '2020年上半年比赛', '2020-06-02 22:27:49', '22', '9', '123456');
INSERT INTO `t_blog` VALUES ('24', '', '', '今天我经历最近以为最累的一天，可能是压力的存在，比赛时间逼近。今天我可能是姿势有问题，导致我经历了晚上才可能经历的落枕的疼痛，比落枕还很难受，走路有气无力的，我坐电梯到了楼顶33楼，然后在床上刷了会儿抖音，洗洗脸才好点了。\r\n\r\n\r\n随着时间的推移，我们的进度也差不多了，虽然是初赛，但是我也拿着百分之百的激情去对待。最后复习了快速加字幕的方式，十分感慨，随着任务完成，疲倦值也越来越低。\r\n\r\n不过最近变胖了几斤，有一个好消息和一个坏消息，怀消息就是变胖了，肚子上腹肌的轮廓若隐若现，好消息就是最近胃好多了，很少有感觉到消化不太好。加油加油加油\r\n\r\n接下来还有计算机设计大赛，2020年加油加油加油！', '2020-06-03 22:58:32', '网络技术大赛gogogo', 'https://compeition-excute.oss-cn-beijing.aliyuncs.com/skin/2072/2020327/c8b1d4a9f8a74df09c329e1841a80a62/hEBnvxHV_1585293373718.jpg', '原创', '', '', '', '网络技术大赛2020年6月3日完结', '2020-06-03 22:58:32', '28', '6', '123456');
INSERT INTO `t_blog` VALUES ('25', '\0', '\0', '两个月的工作：\r\n>1、几十分的实验报告保质保量的完成！\r\n2、陆续比赛的参加\r\n3、夏令营的投递\r\n4、三周课设（ssm+mybatis网站开发）\r\n\r\n	\r\n\r\n>这学期没有考试课，但是有成千上万的报告要写！于是我特别努力的将报告完成。这学期的比赛很多，但是由于疫情的影新，好多比赛都延期举行，基本上都拖到一起了。网络技术大赛、计算机设计大赛、互联网+比赛。夏令营都陆续开放了，我再陆续投递我的简历，硬伤是英语，有好多门槛，我太难了。现在是课设，由黑马传智播客开设的，讲得非常好，每天学会一项新技术，虽然老师讲的特别快，但是我可以跟上，这都源于疫情我自学的原因罢！学会了spring+spring-mvc+mybatis（ssm）框架的搭建也学会radis、jadis的内存数据库的配置等。加油吧，为了更美好的明天而战！已经好久没写博客了。', '2020-06-19 23:25:21', 'record', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(2).jpg', '原创', '', '', '\0', '2020年5、6月份成为最忙碌的日子', '2020-06-19 23:25:21', '15', '17', '123456');
INSERT INTO `t_blog` VALUES ('26', '', '\0', '# 前两周学习了SSM框架学习\r\n经过了类似与毕业设计般的论文，让我成长了很多，我知道论文的各种毛病在哪里，本次论文没有做多次修改，逻辑上稍微有些问题\r\n\r\n在今天修复bug的时候，发现某一位同学的查询模块出不来，后来经过我仔细对照发现原因是%的原因，需要是单引号，但是我的单引号、双引号都是可以的，我感觉应该是在新建项目的时候编码弄得不是utf-8.\r\n', '2020-07-02 22:19:39', 'SQL语句', 'https://dss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3296705764,3107094213&fm=179&app=42&f=JPEG', '原创', '', '', '', '”毕业论文“和SSM框架的一点sql小问题', '2020-07-02 22:21:34', '12', '1', '123456');
INSERT INTO `t_blog` VALUES ('27', '', '', '# 今天是2020年7月24日，我有些陷入了迷茫\r\n> 未来有些迷茫不知何去何从，看到某些大佬三面字节22K，我羡慕了。厉害的人依旧厉害，英语的掠视让我在夏令营期间几乎全军覆没（大概率是英语，还是我太菜了）。\r\n\r\n# 人生时而短暂时而长久\r\n> 每当我向往美好的未来生活时，身边以及网络发生的事情令人耐人寻味、毛骨悚然。另我对自己的要求变低了，感觉自己想着平平淡淡过着就好了，身体毕竟是最最重要的，人生很短暂，快乐真的很重要。但是也有很快乐的时候，看到抖音上的高考学子考700+的很多，瞬间感觉高考好简单啊，但我已经大三了即将大四，这些也与我无关了，我没有看到他们的默默付出，只看到了他们取得的好成绩。\r\n\r\n# 近半个月还是会很忙的\r\n> 近些天我依旧放心不下，每当自己休息娱乐时，心中还会有自己的事情要做，即使导师不回你，还是依旧要去找导师，我不能像他一样，所以自己还是准备好保研的工作比较好，毕竟大概率我是不用考研的。\r\n\r\n*-*\r\n---- ----\r\n今天些一点东西，毕竟心静下来才会认真想一些东西。毕竟入局着迷，旁观者清，最近张一山热播的局中人还是挺好看的。加油，继续砥砺前行吧！', '2020-07-24 23:42:59', '砥砺前行！', 'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1417967960,397060509&fm=26&gp=0.jpg', '原创', '', '', '\0', '保研+预推免+推免+内推', '2020-07-24 23:44:31', '11', '9', '123456');
INSERT INTO `t_blog` VALUES ('28', '', '', '截图粘贴粘贴新功能\r\n\r\n![](http://blog.bupt.ltd:9999/edea8893-28b5-48e6-b92c-347e82b0cf9a.png)\r\n![](http://blog.bupt.ltd:9999/60569a8e-0b31-446d-b1ba-49ef4d391baa.png)\r\n\r\n\r\n哈哈哈哈哈哈\r\n\r\n![](http://blog.bupt.ltd:9999/416725c8-6a7a-4434-b40a-90b77268b192.png)\r\n\r\n![](http://blog.bupt.ltd:9999/e3c18c38-6324-46b3-8cc8-3fc1b0c7ae37.png)\r\n\r\n![](http://blog.bupt.ltd:9999/1243d420-a726-4cd3-9d0b-202f69f090ee.png)', '2021-01-14 21:05:41', 'http://blog.bupt.ltd:9999/1243d420-a726-4cd3-9d0b-202f69f090ee.png', 'http://blog.bupt.ltd:9999/1243d420-a726-4cd3-9d0b-202f69f090ee.png', '原创', '', '', '', 'Get新功能--粘贴新功能', '2021-01-14 21:07:30', '8', '5', '123456');
INSERT INTO `t_blog` VALUES ('29', '\0', '\0', '今天最搞笑的就是用本地的项目去修改服务器。\r\n跑着本地的项目看本地成功了啊， 也提示成功了，可是服务器上并没内容，然后弄了一会儿发现是ip不对。修改错了，重新部署过后才发现是可以的哈哈。\r\n![](https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=917297805,3450343040&fm=26&gp=0.jpg)\r\n\r\n白酒啊\r\n![](http://blog.bupt.ltd:9999/fe5a57e9-678f-41f1-a8b2-50086f6be546.png)', '2021-01-14 21:42:51', '哈哈哈哈', 'http://blog.bupt.ltd:9999/fe5a57e9-678f-41f1-a8b2-50086f6be546.png', '原创', '', '', '\0', '哈哈哈哈', '2021-01-14 21:42:51', '10', '3', '123456');
INSERT INTO `t_blog` VALUES ('30', '\0', '\0', '引申自\r\n [git](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8 \"git\")\r\n\r\n<div id=\"main\" class=\"book edition2\">\r\n    <h1>2.5 Git 基础 - 远程仓库的使用</h1>\r\n  <div>\r\n<h2 id=\"_remote_repos\">远程仓库的使用</h2>\r\n<div class=\"paragraph\">\r\n<p>为了能在任意 Git 项目上协作，你需要知道如何管理自己的远程仓库。\r\n远程仓库是指托管在因特网或其他网络中的你的项目的版本库。\r\n你可以有好几个远程仓库，通常有些仓库对你只读，有些则可以读写。\r\n与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。\r\n管理远程仓库包括了解如何添加远程仓库、移除无效的远程仓库、管理不同的远程分支并定义它们是否被跟踪等等。\r\n在本节中，我们将介绍一部分远程管理的技能。</p>\r\n</div>\r\n<div class=\"admonitionblock note\">\r\n<table>\r\n<tbody><tr>\r\n<td class=\"icon\">\r\n<div class=\"title\">Note</div>\r\n</td>\r\n<td class=\"content\">\r\n<div class=\"title\">远程仓库可以在你的本地主机上</div>\r\n<div class=\"paragraph\">\r\n<p>你完全可以在一个“远程”仓库上工作，而实际上它在你本地的主机上。\r\n词语“远程”未必表示仓库在网络或互联网上的其它位置，而只是表示它在别处。\r\n在这样的远程仓库上工作，仍然需要和其它远程仓库上一样的标准推送、拉取和抓取操作。</p>\r\n</div>\r\n</td>\r\n</tr>\r\n</tbody></table>\r\n</div>\r\n<div class=\"sect3\">\r\n<h3 id=\"_查看远程仓库\">查看远程仓库</h3>\r\n<div class=\"paragraph\">\r\n<p>如果想查看你已经配置的远程仓库服务器，可以运行 <code>git remote</code> 命令。\r\n它会列出你指定的每一个远程服务器的简写。\r\n如果你已经克隆了自己的仓库，那么至少应该能看到 origin ——这是 Git 给你克隆的仓库服务器的默认名字：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git clone https://github.com/schacon/ticgit\r\nCloning into \'ticgit\'...\r\nremote: Reusing existing pack: 1857, done.\r\nremote: Total 1857 (delta 0), reused 0 (delta 0)\r\nReceiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.\r\nResolving deltas: 100% (772/772), done.\r\nChecking connectivity... done.\r\n$ cd ticgit\r\n$ git remote\r\norigin</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>你也可以指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git remote -v\r\norigin	https://github.com/schacon/ticgit (fetch)\r\norigin	https://github.com/schacon/ticgit (push)</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>如果你的远程仓库不止一个，该命令会将它们全部列出。\r\n例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像下面这样：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ cd grit\r\n$ git remote -v\r\nbakkdoor  https://github.com/bakkdoor/grit (fetch)\r\nbakkdoor  https://github.com/bakkdoor/grit (push)\r\ncho45     https://github.com/cho45/grit (fetch)\r\ncho45     https://github.com/cho45/grit (push)\r\ndefunkt   https://github.com/defunkt/grit (fetch)\r\ndefunkt   https://github.com/defunkt/grit (push)\r\nkoke      git://github.com/koke/grit.git (fetch)\r\nkoke      git://github.com/koke/grit.git (push)\r\norigin    git@github.com:mojombo/grit.git (fetch)\r\norigin    git@github.com:mojombo/grit.git (push)</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>这表示我们能非常方便地拉取其它用户的贡献。我们还可以拥有向他们推送的权限，这里暂不详述。</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>注意这些远程仓库使用了不同的协议。我们将会在 <a href=\"ch00/_getting_git_on_a_server\">在服务器上搭建 Git</a> 中了解关于它们的更多信息。</p>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h3 id=\"_添加远程仓库\">添加远程仓库</h3>\r\n<div class=\"paragraph\">\r\n<p>我们在之前的章节中已经提到并展示了 <code>git clone</code> 命令是如何自行添加远程仓库的，\r\n不过这里将告诉你如何自己来添加它。\r\n运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git remote\r\norigin\r\n$ git remote add pb https://github.com/paulboone/ticgit\r\n$ git remote -v\r\norigin	https://github.com/schacon/ticgit (fetch)\r\norigin	https://github.com/schacon/ticgit (push)\r\npb	https://github.com/paulboone/ticgit (fetch)\r\npb	https://github.com/paulboone/ticgit (push)</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>现在你可以在命令行中使用字符串 <code>pb</code> 来代替整个 URL。\r\n例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 <code>git fetch pb</code>：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git fetch pb\r\nremote: Counting objects: 43, done.\r\nremote: Compressing objects: 100% (36/36), done.\r\nremote: Total 43 (delta 10), reused 31 (delta 5)\r\nUnpacking objects: 100% (43/43), done.\r\nFrom https://github.com/paulboone/ticgit\r\n * [new branch]      master     -&gt; pb/master\r\n * [new branch]      ticgit     -&gt; pb/ticgit</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>现在 Paul 的 master 分支可以在本地通过 <code>pb/master</code> 访问到——你可以将它合并到自己的某个分支中，\r\n或者如果你想要查看它的话，可以检出一个指向该点的本地分支。\r\n（我们将会在 <a href=\"ch00/ch03-git-branching\">Git 分支</a> 中详细介绍什么是分支以及如何使用分支。）</p>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h3 id=\"_fetching_and_pulling\">从远程仓库中抓取与拉取</h3>\r\n<div class=\"paragraph\">\r\n<p>就如刚才所见，从远程仓库中获得数据，可以执行：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git fetch &lt;remote&gt;</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。\r\n执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>如果你使用 <code>clone</code> 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。\r\n所以，<code>git fetch origin</code> 会抓取克隆（或上一次抓取）后新推送的所有工作。\r\n必须注意 <code>git fetch</code> 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。\r\n当准备好时你必须手动将其合并入你的工作。</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>如果你的当前分支设置了跟踪远程分支（阅读下一节和 <a href=\"ch00/ch03-git-branching\">Git 分支</a> 了解更多信息），\r\n那么可以用 <code>git pull</code> 命令来自动抓取后合并该远程分支到当前分支。\r\n这或许是个更加简单舒服的工作流程。默认情况下，<code>git clone</code> 命令会自动设置本地 master\r\n分支跟踪克隆的远程仓库的 <code>master</code> 分支（或其它名字的默认分支）。\r\n运行 <code>git pull</code> 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h3 id=\"_pushing_remotes\">推送到远程仓库</h3>\r\n<div class=\"paragraph\">\r\n<p>当你想分享你的项目时，必须将其推送到上游。\r\n这个命令很简单：<code>git push &lt;remote&gt; &lt;branch&gt;</code>。\r\n当你想要将 <code>master</code> 分支推送到 <code>origin</code> 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），\r\n那么运行这个命令就可以将你所做的备份到服务器：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git push origin master</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。\r\n当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。\r\n你必须先抓取他们的工作并将其合并进你的工作后才能推送。\r\n阅读 <a href=\"ch00/ch03-git-branching\">Git 分支</a> 了解如何推送到远程仓库服务器的详细信息。</p>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h3 id=\"_inspecting_remote\">查看某个远程仓库</h3>\r\n<div class=\"paragraph\">\r\n<p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show &lt;remote&gt;</code> 命令。\r\n如果想以一个特定的缩写名运行这个命令，例如 <code>origin</code>，会得到像下面类似的信息：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git remote show origin\r\n* remote origin\r\n  Fetch URL: https://github.com/schacon/ticgit\r\n  Push  URL: https://github.com/schacon/ticgit\r\n  HEAD branch: master\r\n  Remote branches:\r\n    master                               tracked\r\n    dev-branch                           tracked\r\n  Local branch configured for \'git pull\':\r\n    master merges with remote master\r\n  Local ref configured for \'git push\':\r\n    master pushes to master (up to date)</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>它同样会列出远程仓库的 URL 与跟踪分支的信息。\r\n这些信息非常有用，它告诉你正处于 <code>master</code> 分支，并且如果运行 <code>git pull</code>，\r\n就会抓取所有的远程引用，然后将远程 <code>master</code> 分支合并到本地 <code>master</code> 分支。\r\n它也会列出拉取到的所有远程引用。</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>这是一个经常遇到的简单例子。\r\n如果你是 Git 的重度使用者，那么还可以通过 <code>git remote show</code> 看到更多的信息。</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git remote show origin\r\n* remote origin\r\n  URL: https://github.com/my-org/complex-project\r\n  Fetch URL: https://github.com/my-org/complex-project\r\n  Push  URL: https://github.com/my-org/complex-project\r\n  HEAD branch: master\r\n  Remote branches:\r\n    master                           tracked\r\n    dev-branch                       tracked\r\n    markdown-strip                   tracked\r\n    issue-43                         new (next fetch will store in remotes/origin)\r\n    issue-45                         new (next fetch will store in remotes/origin)\r\n    refs/remotes/origin/issue-11     stale (use \'git remote prune\' to remove)\r\n  Local branches configured for \'git pull\':\r\n    dev-branch merges with remote dev-branch\r\n    master     merges with remote master\r\n  Local refs configured for \'git push\':\r\n    dev-branch                     pushes to dev-branch                     (up to date)\r\n    markdown-strip                 pushes to markdown-strip                 (up to date)\r\n    master                         pushes to master                         (up to date)</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>这个命令列出了当你在特定的分支上执行 <code>git push</code> 会自动地推送到哪一个远程分支。\r\n它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，\r\n还有当你执行 <code>git pull</code> 时哪些本地分支可以与它跟踪的远程分支自动合并。</p>\r\n</div>\r\n</div>\r\n<div class=\"sect3\">\r\n<h3 id=\"_远程仓库的重命名与移除\">远程仓库的重命名与移除</h3>\r\n<div class=\"paragraph\">\r\n<p>你可以运行 <code>git remote rename</code> 来修改一个远程仓库的简写名。\r\n例如，想要将 <code>pb</code> 重命名为 <code>paul</code>，可以用 <code>git remote rename</code> 这样做：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git remote rename pb paul\r\n$ git remote\r\norigin\r\npaul</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>值得注意的是这同样也会修改你所有远程跟踪的分支名字。\r\n那些过去引用 <code>pb/master</code> 的现在会引用 <code>paul/master</code>。</p>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>如果因为一些原因想要移除一个远程仓库——你已经从服务器上搬走了或不再想使用某一个特定的镜像了，\r\n又或者某一个贡献者不再贡献了——可以使用 <code>git remote remove</code> 或 <code>git remote rm</code> ：</p>\r\n</div>\r\n<div class=\"listingblock\">\r\n<div class=\"content\">\r\n<pre class=\"highlight\"><code class=\"language-console\" data-lang=\"console\">$ git remote remove paul\r\n$ git remote\r\norigin</code></pre>\r\n</div>\r\n</div>\r\n<div class=\"paragraph\">\r\n<p>一旦你使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p>\r\n</div>\r\n</div>\r\n<div id=\"nav\"><a href=\"/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C\">prev</a> | <a href=\"/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE\">next</a></div></div>\r\n</div>\r\n[1]: https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8', '2021-01-15 19:53:23', 'GIT', 'https://git-scm.com/images/logo@2x.png', '原创', '', '', '\0', 'git配置', '2021-01-15 19:54:28', '6', '1', '123456');
INSERT INTO `t_blog` VALUES ('31', '\0', '\0', '![](http://blog.bupt.ltd:9999/636947f8-6a37-4a76-a43e-a4af8c1647d2.png)\r\n\r\n![](http://blog.bupt.ltd:9999/59911b2e-c852-47ec-a21f-3e30ac78d1ab.png)\r\n\r\n![](http://blog.bupt.ltd:9999/d7c5235f-2943-4252-b8fb-4a7ef13e2112.png)\r\n\r\n![](http://blog.bupt.ltd:9999/d754d6f1-7042-42d1-9430-b309821cdf36.png)\r\n\r\n![](http://blog.bupt.ltd:9999/5e12c67b-8d86-4b77-a31b-152674139a90.png)	\r\n\r\n出现问题\r\n\r\n![](http://blog.bupt.ltd:9999/04127c49-cad7-4995-81f6-667dd8d81db6.png)\r\n\r\n解决方案\r\n刚开始用git上传文件的时候遇到了一些问题\r\n第一个问题\r\n上传步骤：\r\ngit add .\r\ngit commit -m \"提示消息\"\r\ngit push origin master\r\n\r\n出错：\r\n! [rejected] master -> master (fetch first) error: failed to push some refs to \' 。。。\'\r\n\r\n出现这个问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并\r\n```git\r\ngit pull --rebase origin master\r\n```', '2021-01-15 21:31:23', 'git使用', 'http://blog.bupt.ltd:9999/d754d6f1-7042-42d1-9430-b309821cdf36.png', '原创', '', '', '\0', 'Git学习使用', '2021-01-15 21:31:23', '6', '1', '123456');
INSERT INTO `t_blog` VALUES ('32', '\0', '\0', '![](http://blog.bupt.ltd:9999/4b1da15c-719b-4b21-b4b0-b587e6b75d52.png)\r\n.![](http://blog.bupt.ltd:9999/fd79061a-9814-432a-9034-03d4adab59a2.png)', '2021-01-31 15:08:58', 'echarts', 'http://blog.bupt.ltd:9999/4b1da15c-719b-4b21-b4b0-b587e6b75d52.png', '原创', '', '\0', '\0', '微信小程序echarts 坑', '2021-01-31 15:09:54', '7', '2', '123456');
INSERT INTO `t_blog` VALUES ('33', '\0', '\0', '![](http://blog.bupt.ltd:9999/7c238c2f-35c6-4114-9945-8850998e1e1b.png)', '2021-02-01 15:38:50', 'Hashmap', 'http://blog.bupt.ltd:9999/7c238c2f-35c6-4114-9945-8850998e1e1b.png', '原创', '', '\0', '\0', 'Hashmap', '2021-02-01 15:39:55', '8', '20', '123456');
INSERT INTO `t_blog` VALUES ('34', '', '\0', '![](http://blog.bupt.ltd:9999/e4327862-d33f-4543-bfd4-e27874da59e2.png)\r\n![](http://blog.bupt.ltd:9999/ba4bb7e1-5ae2-401f-a1bf-db4816a14642.png)\r\n\r\n\r\n![](http://blog.bupt.ltd:9999/bbaad944-1ea9-42af-bdd8-2dbbe10540d1.png)\r\n脱机 联机命令\r\n脱机一堆指令\r\n\r\n程序接口调用 ==系统调用\r\n\r\n剑指Offer \r\n![](http://blog.bupt.ltd:9999/0581cc50-c5b6-48a9-a60b-1f01f37f4228.png)\r\n\r\n\r\n二叉树中和为某一值的路径', '2021-02-07 00:15:31', '1', '1', '原创', '', '\0', '\0', '操作系统复习', '2021-02-07 00:15:51', '5', '3', '123456');
INSERT INTO `t_blog` VALUES ('35', '', '', '### 十三号星期五真的很不常见吗？\r\n\r\n每个月的十三号是星期五的频率是否比一周中的其他几天低？\r\n\r\n请编写一个程序，计算 N 年内每个月的 13 号是星期日，星期一，星期二，星期三，星期四，星期五和星期六的频率。\r\n\r\n测试的时间段将会开始于 1900 年 1 月 1 日，结束于 1900+N−1 年 12 月 31日。\r\n\r\n一些有助于你解题的额外信息：\r\n\r\n1900 年 1 月 1 日是星期一。\r\n在一年中，4 月、6 月、9 月、11 月每个月 30 天，2 月平年 28 天，闰年 29 天，其他月份每个月31天。\r\n公历年份是 4 的倍数且不是 100 的倍数的年份为闰年，例如 1992 年是闰年，1990 年不是闰年。\r\n公历年份是整百数并且是 400 的倍数的也是闰年，例如1700年，1800年，1900年，2100年不是闰年，2000年是闰年。\r\n### 输入格式\r\n共一行，包含一个整数 N。\r\n\r\n### 输出格式\r\n共一行，包含七个整数，整数之间用一个空格隔开，依次表示星期六，星期日，星期一，星期二，星期三，星期四，星期五在十三号出现的次数。\r\n\r\n### 数据范围\r\n1≤N≤400\r\n### 输入样例：\r\n20\r\n### 输出样例：\r\n36 33 34 33 35 35 34\r\n\r\n题解\r\n```c++\r\n#include<iostream>\r\nusing namespace std;\r\nint run(int year)\r\n{\r\n    if((year%4==0&&year%100!=0)||year%400==0)\r\n    {\r\n        return 1;\r\n        \r\n    }\r\n    return 0;\r\n}   \r\nint b[8];\r\nint main()\r\n{\r\n     int a[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};\r\n     int n;\r\n     cin>>n;\r\n     n = 1900+n-1;\r\n     int c= 1;//星期一\r\n\r\n     for(int i = 1900 ; i <=n;i++)\r\n     {\r\n         for(int j = 1;j<=12;j++)\r\n         {   \r\n             int tmp = a[j];\r\n             if(run(i)==1&&j==2)\r\n             tmp++;\r\n          \r\n             \r\n             for(int k = 1;k<=tmp;k++)\r\n             {\r\n                if(k==13)\r\n                 b[c]++;\r\n              \r\n                 c++;\r\n                 if(c==8) c=1;\r\n             }\r\n         }\r\n         \r\n     }\r\n     \r\n     cout<<b[6]<<\" \"<<b[7]<<\" \";\r\n     for(int i = 1;i<=5;i++)\r\n     {\r\n         cout<<b[i]<<\" \";\r\n     }\r\n}\r\n```\r\n![](http://blog.bupt.ltd:9999/36767eba-922b-40e7-8283-490479aa3f22.png)', '2021-02-07 00:55:41', 'http://blog.bupt.ltd:9999/36767eba-922b-40e7-8283-490479aa3f22.png', 'http://blog.bupt.ltd:9999/36767eba-922b-40e7-8283-490479aa3f22.png', '原创', '', '', '', '1341. 十三号星期五', '2021-02-07 00:55:41', '13', '1', '123456');
INSERT INTO `t_blog` VALUES ('36', '', '\0', '![](http://blog.bupt.ltd:9999/99172817-644e-4ca9-b546-d53c1dd44e61.png)\r\n对象的实例保存在堆上，对象的元数据（instantKlass）保存在方法区，对象的引用保存在栈上。\r\n\r\n\r\n.class文件是java文件编译后的结果 \r\n1.加载\r\n    加载指的是将类的class文件读入到内存，并为之创建一个java.lang.Class对象，也就是说，当程序中使用任何类时，系统都会为之建立一个java.lang.Class对象。\r\n    类的加载由类加载器完成，类加载器通常由JVM提供，这些类加载器也是前面所有程序运行的基础，JVM提供的这些类加载器通常被称为系统类加载器。除此之外，开发者可以通过继承ClassLoader基类来创建自己的类加载器。\r\n    通过使用不同的类加载器，可以从不同来源加载类的二进制数据，通常有如下几种来源。\r\n\r\n从本地文件系统加载class文件，这是前面绝大部分示例程序的类加载方式。\r\n从JAR包加载class文件，这种方式也是很常见的，前面介绍JDBC编程时用到的数据库驱动类就放在JAR文件中，JVM可以从JAR文件中直接加载该class文件。\r\n通过网络加载class文件。\r\n把一个Java源文件动态编译，并执行加载。\r\n\r\n无论如何给到BOOT！\r\nAPP - EXC---BOOT', '2021-02-14 00:32:31', 'JVM', 'http://blog.bupt.ltd:9999/99172817-644e-4ca9-b546-d53c1dd44e61.png', '原创', '', '\0', '', 'JVM', '2021-02-14 01:04:33', '7', '1', '123456');
INSERT INTO `t_blog` VALUES ('37', '\0', '\0', ' if(sum>0)\r\n//                 System.out.println(\"卖票\"+sum+\",剩余\"+(--sum)+\"票\");\r\n\r\n0、synchronized实现原理  \r\n\r\n\r\nJava中每一个对象都可以作为锁，这是synchronized实现同步的基础：  \r\n\r\n\r\n普通同步方法，锁是当前实例对象  \r\n\r\n静态同步方法，锁是当前类的class对象  \r\n\r\n同步方法块，锁是括号里面的对象 \r\n当一个线程访问同步代码块时，它首先是需要得到锁，当退出或者抛出异常时必须要释放锁，那么它是如何来实现这个机制的呢？我们先看一段简单的代码：\r\n```java\r\npublic  void sale()\r\n    {\r\n        //synchronized\r\n        synchronized (this){\r\n            if(sum>0)\r\n                 System.out.println(\"卖票\"+sum+\",剩余\"+(--sum)+\"票\");\r\n        }\r\n\r\n\r\n\r\n\r\n        //lock \r\n        lock.lock();//上锁\r\n         try {\r\n             if(sum>0)\r\n                 System.out.println(\"卖票\"+sum+\",剩余\"+(--sum)+\"票\");\r\n\r\n         }catch (Exception e)\r\n         {\r\n             System.out.println(e);\r\n         }finally {\r\n             lock.unlock();\r\n         }\r\n\r\n\r\n\r\n    }\r\n```\r\n\r\n\r\n![](http://blog.bupt.ltd:9999/4d0b4372-2d56-4a54-9d44-50d094a0fdee.png)\r\n\r\n2种机制的具体区别：\r\nsynchronized原始采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。\r\n\r\n而Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就是CAS操作（Compare and Swap）。我们可以进一步研究ReentrantLock的源代码，会发现其中比较重要的获得锁的一个方法是compareAndSetState。这里其实就是调用的CPU提供的特殊指令。\r\n\r\n现代的CPU提供了指令，可以自动更新共享数据，而且能够检测到其他线程的干扰，而 compareAndSet() 就用这些代替了锁定。这个算法称作非阻塞算法，意思是一个线程的失败或者挂起不应该影响其他线程的失败或挂起的算法。\r\n\r\n\r\n# 如何判断锁的对象是谁?\r\n```java\r\n    System.out.println(this);//所有的非静态同步方法用的都是同一把锁——实例对象本身 new Ticket()\r\n        System.out.println(this.getClass());//所有的静态同步方法用的都是同一把锁——类对象本身 Ticket\r\n```\r\n锁对象 或者是Class（Class是唯一的）\r\n\r\n对象是多个的\r\n\r\n对象是由Class模板new 出来的', '2021-02-17 14:21:00', 'synchronized和Lock的区别是什么？', 'https://img.php.cn/upload/article/202011/19/2020111911380114876.jpg', '原创', '', '', '\0', 'synchronized', '2021-02-17 17:16:44', '11', '20', '123456');
INSERT INTO `t_blog` VALUES ('38', '\0', '\0', '1、首先先new一个hashmap 这个有好几个构造方法\r\n可以有参数就是node数组大小\r\n通过大小然后为表制作标准大小2的n次方\r\n\r\n2、建表之后呢，就需要put 调用putval 传入key value\r\n先判断hashmap 的数组是否初始化了 如果为null的话则给默认值16\r\n负载因子给0.75  这个数值是根据反复实验的来的。\r\n\r\n3往表里面插入元素\r\nJDK1.7之前是数组加链表  后来为了优化链表过长\r\nJDK1.8变成了**数组+链表+红黑树**\r\n说一下jdk1.8的\r\n通过hashcode是调用native方法不是Java的应该是c的\r\n但这个hashcode并不是最终的要低16位跟高16位想与 让高16位也参与进来。   \r\n\r\n然后如果新new出来的有参数的话是容量  需要用sizefor变成标准表大小 就是通过巧妙的左移和|运算 变成一个大于的2的n次方  \r\n\r\n然后就开始正式插入元素了  \r\n\r\n先通过得到的hash跟表长想& 其实就是跟表长length求余\r\n计算机中位运算是最快的  \r\n\r\n然后就是分三种情况\r\n1、如果得到的这个结果找到表中相应的位置，如果为null说明是首次插入\r\n\r\n2、如果是红黑树则转入到红黑树进行左旋右旋插入\r\n\r\n3、剩下的情况就是链表了。通过while循环查找相同的key的hash值如\r\n```java\r\n for (int binCount = 0; ; ++binCount) {\r\n                    if ((e = p.next) == null) {\r\n                        p.next = newNode(hash, key, value, null);\r\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\r\n                            treeifyBin(tab, hash);\r\n                        break;\r\n                    }\r\n                    if (e.hash == hash &&\r\n                        ((k = e.key) == key || (key != null && key.equals(k))))\r\n                        break;\r\n                    p = e;\r\n                }\r\n```\r\n其中的treeifyBin是进行树化操作，当节点数大于等于8-1个的时候进行树化，但是树化方法中还有一个限制就是需要数组长度64才是进行真正的树化。\r\n\r\n  p.next = newNode(hash, key, value, null);通过尾插法\r\n  头插法缺点是多线程会造成循环链表扩容的时候，\r\n找到相同的key则替换掉 返回旧的元素，找不到就插到尾部\r\n<font color =\"red\">key是唯一的  value不唯一 </font>\r\n\r\n\r\n\r\n```java\r\n  TreeNode<K,V> parent;  // red-black tree links\r\n        TreeNode<K,V> left;\r\n        TreeNode<K,V> right;\r\n        TreeNode<K,V> prev;    // needed to unlink next upon deletion\r\n        boolean red;\r\n\r\n``` \r\n\r\n\r\n\r\n\r\n\r\n', '2021-02-19 23:58:51', '1', '1', '原创', '', '', '', 'Hashmap 1.8JDK', '2021-02-20 00:13:33', '6', '2', '123456');
INSERT INTO `t_blog` VALUES ('39', '\0', '\0', '![](http://blog.bupt.ltd:9999/e4360702-67de-4566-ac5f-cfeed769cee7.png\r\n\r\nvolatile就可以说是java虚拟机提供的最轻量级的同步机制\r\n避免出现脏读问题\r\n被volatile修饰的变量能够保证每个线程能够获取该变量的最新值，从而避免出现数据脏读的现象。\r\n获取最新的值\r\n\r\n缓存一致性协议\r\n\r\n\r\n\r\n![](http://blog.bupt.ltd:9999/bd2082c5-57a6-416c-a721-db04e48a4959.png)\r\n当volatile变量写后，线程中本地内存中共享变量就会置为失效的状态，因此线程B再需要读取从主内存中去读取该变量的最新值。\r\n![](http://blog.bupt.ltd:9999/e8786c80-401a-481d-ba6c-222a50ac2bfe.png)\r\n\r\n我们都知道，为了性能优化，JMM在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序，那如果想阻止重排序要怎么办了？答案是可以添加内存屏障\r\n\r\n为了性能优化 不改变语义 然后进行重排序JMM\r\n为了防止重排序 内存屏障\r\n\r\n as-if-serial语义的意思是：不管怎么重排序，（单线程）程序的执行结果不能被改变。编译器、runtime和处理器都必须遵守as-if-serial语义。\r\n\r\n   为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序。\r\n   \r\n   \r\n   源代码->编译器优化重排->指令并行重排->内存系统重排\r\n   \r\n   存在依赖关系不能指令重排！！！\r\n   volatile 禁止指令重排！\r\n   利用了volatile的可见性！\r\n   \r\n   不加volatile 线程不可见内存的可见性\r\n```java\r\nint num = 0 ;\r\n\r\n new Thread()\r\n {\r\nwhile(num == 0)\r\n {\r\n \r\n }\r\n }\r\n num = 1;\r\n //死循环\r\n \r\n \r\n int volatile num = 0 ;\r\n 无死循环\r\n```', '2021-02-20 16:07:50', '   为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序。', 'http://blog.bupt.ltd:9999/e8786c80-401a-481d-ba6c-222a50ac2bfe.png', '原创', '', '', '\0', '缓存一致性协议', '2021-02-20 16:19:15', '10', '15', '123456');
INSERT INTO `t_blog` VALUES ('40', '\0', '\0', '枚举 单例模式\r\n单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\r\n\r\n这种模式涉及到一个单一的类，**该类负责创建自己的对象，**同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，**不需要实例化该类的对象**。\r\n饿汉式 单例  先创建好\r\n```java\r\npublic class Hungry {\r\n\r\n    private  byte[]data1 = new byte[10254];\r\n    private  byte[]data2 = new byte[10254];\r\n    private  byte[]data3 = new byte[10254];\r\n    private  byte[]data4 = new byte[10254];\r\n    public Hungry() {\r\n    }\r\n    private final  static  Hungry HUNGRY = new Hungry();\r\n\r\n    public  static  Hungry getInstance()\r\n    {\r\n\r\n        return HUNGRY;\r\n    }\r\n\r\n}\r\n```\r\n\r\n懒汉式 用了再创建new\r\n\r\n```java\r\npublic class Lazy {\r\n    public Lazy() {\r\n    }\r\n    private  static Lazy lazy;\r\n\r\n    public  static  Lazy getInstance()\r\n    {\r\n        if(lazy==null)\r\n        return lazy = new Lazy();\r\n        return lazy;\r\n    }\r\n```\r\n\r\n![](http://blog.bupt.ltd:9999/f0d3aea5-57f7-4a91-baa3-b674682daa93.png)\r\n\r\n3.静态内部类模式：\r\n```java\r\npublic class SingleTon{\r\n  private SingleTon(){}\r\n \r\n  private static class SingleTonHoler{\r\n     private static SingleTon INSTANCE = new SingleTon();\r\n }\r\n \r\n  public static SingleTon getInstance(){\r\n    return SingleTonHoler.INSTANCE;\r\n  }\r\n}\r\n```', '2021-02-20 16:40:44', '单例模式', 'http://blog.bupt.ltd:9999/f0d3aea5-57f7-4a91-baa3-b674682daa93.png', '原创', '', '', '\0', '单例模式', '2021-02-20 16:48:46', '8', '1', '123456');
INSERT INTO `t_blog` VALUES ('41', '\0', '\0', '<p> <br> <a href=\"https://blog.csdn.net/qq_34203492/article/details/84324688\">Java单例—双重锁校验详解</a><br> <a href=\"https://blog.csdn.net/qq_34203492/article/details/84326571\">Java单例—序列化破坏单例模式原理解析</a><br> <a href=\"https://blog.csdn.net/qq_34203492/article/details/84334742\">Java单例—静态内部类</a><br> 在静态内部类中引出了反射攻击的问题，本篇就来说一下反射攻击，废话不多少说上代码：</p>\r\n\r\n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.copyCode(event)\" style=\"position: unset;\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>Constructor<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>InvocationTargetException<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{<!-- --></span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NoSuchMethodException<span class=\"token punctuation\">,</span> IllegalAccessException<span class=\"token punctuation\">,</span> InvocationTargetException<span class=\"token punctuation\">,</span> InstantiationException <span class=\"token punctuation\">{<!-- --></span>\r\n        Class <span class=\"token class-name\">objClass</span> <span class=\"token operator\">=</span> StaticInnerClass<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//获取类的构造器</span>\r\n        Constructor constructor <span class=\"token operator\">=</span> objClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//把构造器私有权限放开</span>\r\n        constructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//正常的获取实例方式</span>\r\n        StaticInnerClass staticInnerClass <span class=\"token operator\">=</span> StaticInnerClass<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//反射创建实例</span>\r\n        StaticInnerClass newStaticInnerClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>StaticInnerClass<span class=\"token punctuation\">)</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>staticInnerClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>newStaticInnerClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>staticInnerClass <span class=\"token operator\">==</span> newStaticInnerClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n<div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\"></div></code>    </pre>\r\n<span style=\"color:#ff0000;\">外部类加载时并不需要立即加载内部类，内部类不被加载则不去初始化INSTANCE，故而不占内存。</span>\r\n破坏单例模式\r\n![](http://blog.bupt.ltd:9999/6b4e22cd-4304-44bf-a28e-3842be42f19d.png)\r\n```java\r\n  public Lazy() {\r\n            synchronized (Lazy.class)\r\n            {\r\n                if(lazy!=null)\r\n                    throw new RuntimeException(\"不要试图破坏单例\");\r\n            }\r\n        }\r\n\r\n        private  static Lazy lazy;\r\n\r\n        public  static  Lazy getInstance()\r\n        {\r\n            if(lazy==null)\r\n            return lazy = new Lazy();\r\n            return lazy;\r\n        }\r\n\r\n        public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\r\n            Lazy lazy = new Lazy();\r\n\r\n\r\n                Constructor<Lazy>  declaredConstructors = Lazy.class.getDeclaredConstructor(null);\r\n\r\n            declaredConstructors.setAccessible(true);\r\n\r\n            Lazy lazy1 = declaredConstructors.newInstance();\r\n            System.out.println(lazy);\r\n            System.out.println(lazy1);\r\n\r\n        }\r\n```', '2021-02-20 16:52:07', '1', '1', '原创', '', '', '\0', '单例模式Ⅱ', '2021-02-20 17:02:54', '9', '3', '123456');
INSERT INTO `t_blog` VALUES ('42', '\0', '\0', '工厂模式 getShape\r\n```java\r\npublic class ShapeFactory {\r\n    \r\n   //使用 getShape 方法获取形状类型的对象\r\n   public Shape getShape(String shapeType){\r\n      if(shapeType == null){\r\n         return null;\r\n      }        \r\n      if(shapeType.equalsIgnoreCase(\"CIRCLE\")){\r\n         return new Circle();\r\n      } else if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\r\n         return new Rectangle();\r\n      } else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\r\n         return new Square();\r\n      }\r\n      return null;\r\n   }\r\n}\r\n```\r\n\r\n\r\n```java\r\npublic class FactoryPatternDemo {\r\n \r\n   public static void main(String[] args) {\r\n      ShapeFactory shapeFactory = new ShapeFactory();\r\n \r\n      //获取 Circle 的对象，并调用它的 draw 方法\r\n      Shape shape1 = shapeFactory.getShape(\"CIRCLE\");\r\n \r\n      //调用 Circle 的 draw 方法\r\n      shape1.draw();\r\n \r\n      //获取 Rectangle 的对象，并调用它的 draw 方法\r\n      Shape shape2 = shapeFactory.getShape(\"RECTANGLE\");\r\n \r\n      //调用 Rectangle 的 draw 方法\r\n      shape2.draw();\r\n \r\n      //获取 Square 的对象，并调用它的 draw 方法\r\n      Shape shape3 = shapeFactory.getShape(\"SQUARE\");\r\n \r\n      //调用 Square 的 draw 方法\r\n      shape3.draw();\r\n   }\r\n}\r\n```\r\n', '2021-02-20 17:13:27', '1', '1', '原创', '', '', '\0', '工厂模式', '2021-02-20 17:13:27', '5', '20', '123456');
INSERT INTO `t_blog` VALUES ('43', '\0', '\0', '![](http://blog.bupt.ltd:9999/ffd6a775-6243-4b4d-aad2-ce279e555f85.png)\r\n# 类装载器是JVM的一部分\r\n![](http://blog.bupt.ltd:9999/c244c0a9-8752-477c-b73b-be1d9281ce4b.png)\r\n\r\nGC的作用域 方法区  堆\r\nJava栈是负责java程序的运行 main函数以数据结构 栈的方式放变量和函数 这个是不进行GC处理的 这个只是引用\r\n堆才是进行GC处理  都是分配在堆里面的\r\n\r\n本地方法栈（native method stack）主要作用是登记native方法，然后在execution engine执行的时候加载本地方法库。**native关键字**\r\n\r\n4 方法区它是指线程共享的，谁都可以共享使用，我们通常用来保存装载类的元结构信息。**在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。**\r\n\r\n5 本地接口是调用C的 JAVA不支持访问底层 通过native 访问\r\n本地接口（native interface）作用是融合不同的编程语言为Java所用，注意底层是C、C++写的，学习JVM时了解C语言一些更好，最起码能看懂，这个方法的行为就是native method stack中登记native方法，\r\n\r\n\r\n# GC\r\n3.4.2 复制算法\r\n为了解决效率问题，复制算法就出现了。它将可用内存按容量划分成两等分，每次只使用其中的一块。和survivor一样也是用from和to两个指针这样的玩法。fromPlace存满了，就把存活的对象copy到另一块toPlace上，然后交换指针的内容。这样就解决了碎片的问题。\r\n\r\n这个算法的代价就是把内存缩水了，这样堆内存的使用效率就会变得十分低下了\r\n\r\n![](http://blog.bupt.ltd:9999/e9f7ff3c-cbb0-43ca-929e-4c41cc777de4.png)\r\n\r\n3.4.3 标记整理算法\r\n复制算法在对象存活率高的时候会有一定的效率问题，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存![](http://blog.bupt.ltd:9999/61a563a1-4cfb-4c98-85d6-538804421370.png)\r\n\r\n\r\n## 二、类加载器的介绍\r\n之前也提到了它是负责加载.class文件的，它们在文件开头会有特定的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构，并且ClassLoader只负责class文件的加载，而是否能够运行则由 Execution Engine 来决定\r\n\r\n### 2.1 类加载器的流程\r\n从类被加载到虚拟机内存中开始，到释放内存总共有7个步骤：加载，验证，准备，解析，初始化，使用，卸载。其中验证，准备，解析三个部分统称为连接\r\n\r\n#### 2.1.1 加载\r\n将class文件加载到内存\r\n\r\n将静态数据结构转化成方法区中运行时的数据结构\r\n\r\n在堆中生成一个代表这个类的 java.lang.Class对象作为数据访问的入口\r\n#### 2.1.2 链接\r\n验证：确保加载的类符合 JVM 规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事件，其实就是一个安全检查\r\n\r\n准备：为static变量在方法区中分配内存空间，设置变量的初始值，例如 static int a = 3 （注意：准备阶段只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是对象初始化时赋值的）\r\n\r\n解析：虚拟机将常量池内的符号引用替换为直接引用的过程（符号引用比如我现在import java.util.ArrayList这就算符号引用，直接引用就是指针或者对象地址，注意引用对象一定是在内存进行）\r\n\r\n#### 2.1.3 初始化\r\n初始化其实就是一个赋值的操作，它会执行一个类构造器的<clinit>()方法。由编译器自动收集类中所有变量的赋值动作，此时准备阶段时的那个 static int a = 3 的例子，在这个时候就正式赋值为3\r\n\r\n#### 2.1.4 卸载\r\nGC将无用对象从内存中卸载\r\n\r\n## 2.2 类加载器的加载顺序\r\n加载一个Class类的顺序也是有优先级的，类加载器从最底层开始往上的顺序是这样的\r\n\r\nBootStrap ClassLoader：rt.jar\r\n\r\nExtention ClassLoader: 加载扩展的jar包\r\n\r\nApp ClassLoader：指定的classpath下面的jar包\r\n\r\nCustom ClassLoader：自定义的类加载器\r\n\r\n## 2.3 双亲委派机制\r\n当一个类收到了加载请求时，它是不会先自己去尝试加载的，而是委派给父类去完成，比如我现在要new一个Person，这个Person是我们自定义的类，如果我们要加载它，就会先委派App ClassLoader，只有当父类加载器都反馈自己无法完成这个请求（也就是父类加载器都没有找到加载所需的Class）时，子类加载器才会自行尝试加载\r\n\r\n这样做的好处是，加载位于rt.jar包中的类时不管是哪个加载器加载，最终都会委托到BootStrap ClassLoader进行加载，这样保证了使用不同的类加载器得到的都是同一个结果。\r\n\r\n其实这个也是一个隔离的作用，避免了我们的代码影响了JDK的代码，比如我现在要来一个\r\n\r\npublic class String(){\r\n    public static void main(){sout;}\r\n}\r\n这种时候，我们的代码肯定会报错，因为在加载的时候其实是找到了rt.jar中的String.class，然后发现这也没有main方法', '2021-02-21 17:10:42', '1', '1', '原创', '', '', '\0', 'JVM Ⅱ', '2021-02-21 17:10:42', '5', '18', '123456');
INSERT INTO `t_blog` VALUES ('44', '\0', '\0', '![](http://blog.bupt.ltd:9999/ffd6a775-6243-4b4d-aad2-ce279e555f85.png)\r\n# 类装载器是JVM的一部分\r\n![](http://blog.bupt.ltd:9999/c244c0a9-8752-477c-b73b-be1d9281ce4b.png)\r\n\r\nGC的作用域 方法区  堆\r\nJava栈是负责java程序的运行 main函数以数据结构 栈的方式放变量和函数 这个是不进行GC处理的 这个只是引用\r\n堆才是进行GC处理  都是分配在堆里面的\r\n\r\n本地方法栈（native method stack）主要作用是登记native方法，然后在execution engine执行的时候加载本地方法库。**native关键字**\r\n\r\n4 方法区它是指线程共享的，谁都可以共享使用，我们通常用来保存装载类的元结构信息。**在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。**\r\n\r\n5 本地接口是调用C的 JAVA不支持访问底层 通过native 访问\r\n本地接口（native interface）作用是融合不同的编程语言为Java所用，注意底层是C、C++写的，学习JVM时了解C语言一些更好，最起码能看懂，这个方法的行为就是native method stack中登记native方法，\r\n\r\n\r\n# GC\r\n3.4.2 复制算法\r\n为了解决效率问题，复制算法就出现了。它将可用内存按容量划分成两等分，每次只使用其中的一块。和survivor一样也是用from和to两个指针这样的玩法。fromPlace存满了，就把存活的对象copy到另一块toPlace上，然后交换指针的内容。这样就解决了碎片的问题。\r\n\r\n这个算法的代价就是把内存缩水了，这样堆内存的使用效率就会变得十分低下了\r\n\r\n![](http://blog.bupt.ltd:9999/e9f7ff3c-cbb0-43ca-929e-4c41cc777de4.png)\r\n\r\n3.4.3 标记整理算法\r\n复制算法在对象存活率高的时候会有一定的效率问题，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存![](http://blog.bupt.ltd:9999/61a563a1-4cfb-4c98-85d6-538804421370.png)\r\n\r\n\r\n## 二、类加载器的介绍\r\n之前也提到了它是负责加载.class文件的，它们在文件开头会有特定的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构，并且ClassLoader只负责class文件的加载，而是否能够运行则由 Execution Engine 来决定\r\n\r\n### 2.1 类加载器的流程\r\n从类被加载到虚拟机内存中开始，到释放内存总共有7个步骤：加载，验证，准备，解析，初始化，使用，卸载。其中验证，准备，解析三个部分统称为连接\r\n\r\n#### 2.1.1 加载\r\n将class文件加载到内存\r\n\r\n将静态数据结构转化成方法区中运行时的数据结构\r\n\r\n在堆中生成一个代表这个类的 java.lang.Class对象作为数据访问的入口\r\n#### 2.1.2 链接\r\n验证：确保加载的类符合 JVM 规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事件，其实就是一个安全检查\r\n\r\n准备：为static变量在方法区中分配内存空间，设置变量的初始值，例如 static int a = 3 （注意：准备阶段只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是对象初始化时赋值的）\r\n\r\n解析：虚拟机将常量池内的符号引用替换为直接引用的过程（符号引用比如我现在import java.util.ArrayList这就算符号引用，直接引用就是指针或者对象地址，注意引用对象一定是在内存进行）\r\n\r\n#### 2.1.3 初始化\r\n初始化其实就是一个赋值的操作，它会执行一个类构造器的<clinit>()方法。由编译器自动收集类中所有变量的赋值动作，此时准备阶段时的那个 static int a = 3 的例子，在这个时候就正式赋值为3\r\n\r\n#### 2.1.4 卸载\r\nGC将无用对象从内存中卸载\r\n\r\n## 2.2 类加载器的加载顺序\r\n加载一个Class类的顺序也是有优先级的，类加载器从最底层开始往上的顺序是这样的\r\n\r\nBootStrap ClassLoader：rt.jar\r\n\r\nExtention ClassLoader: 加载扩展的jar包\r\n\r\nApp ClassLoader：指定的classpath下面的jar包\r\n\r\nCustom ClassLoader：自定义的类加载器\r\n\r\n## 2.3 双亲委派机制\r\n当一个类收到了加载请求时，它是不会先自己去尝试加载的，而是委派给父类去完成，比如我现在要new一个Person，这个Person是我们自定义的类，如果我们要加载它，就会先委派App ClassLoader，只有当父类加载器都反馈自己无法完成这个请求（也就是父类加载器都没有找到加载所需的Class）时，子类加载器才会自行尝试加载\r\n\r\n这样做的好处是，加载位于rt.jar包中的类时不管是哪个加载器加载，最终都会委托到BootStrap ClassLoader进行加载，这样保证了使用不同的类加载器得到的都是同一个结果。\r\n\r\n其实这个也是一个隔离的作用，避免了我们的代码影响了JDK的代码，比如我现在要来一个\r\n\r\npublic class String(){\r\n    public static void main(){sout;}\r\n}\r\n这种时候，我们的代码肯定会报错，因为在加载的时候其实是找到了rt.jar中的String.class，然后发现这也没有main方法', '2021-02-21 17:24:48', '1', '1', '原创', '', '', '\0', 'JVM Ⅱ', '2021-02-21 17:24:48', '5', '4', '123456');
INSERT INTO `t_blog` VALUES ('45', '\0', '\0', '对象的实例保存在堆上，对象的元数据（instantKlass）保存在方法区，对象的引用保存在栈上。', '2021-02-21 17:37:44', '对象的实例保存在堆上，对象的元数据（instantKlass）保存在方法区，对象的引用保存在栈上。', '对象的实例保存在堆上，对象的元数据（instantKlass）保存在方法区，对象的引用保存在栈上。', '原创', '', '', '\0', '对象的实例保存在堆上，对象的元数据（instantKlass）保存在方法区，对象的引用保存在栈上。', '2021-02-21 17:37:44', '4', '1', '123456');
INSERT INTO `t_blog` VALUES ('46', '\0', '\0', '连续分配\r\n单一连续分配\r\n固定大小分配\r\n动态分配\r\n\r\n离散分配\r\n分页 \r\n分段\r\n段页式\r\n![](http://blog.bupt.ltd:9999/a7047fec-efc6-4cb7-8e30-a504d762a835.png)\r\n\r\n![](http://blog.bupt.ltd:9999/1e62c154-6278-4d5f-8d89-bb37c1e6e318.png)\r\n虚拟存储\r\n请求分页分段\r\n请求断页式\r\n![](http://blog.bupt.ltd:9999/1b60ee20-46aa-49fb-a8b5-cb79e1bdd56b.png)\r\n\r\n缺页算法调度\r\n未来最后用的替换掉\r\n\r\nLRU\r\n![](http://blog.bupt.ltd:9999/b29bfebd-f145-4e04-a712-3fe34c171a67.png)\r\n\r\n\r\n内存管理\r\n![](http://blog.bupt.ltd:9999/c31ef43a-6d8e-4a38-ad74-e114b2b83f87.png)', '2021-02-21 22:06:39', 'http://blog.bupt.ltd:9999/c31ef43a-6d8e-4a38-ad74-e114b2b83f87.png', 'http://blog.bupt.ltd:9999/c31ef43a-6d8e-4a38-ad74-e114b2b83f87.png', '原创', '', '', '\0', '操作系统分页分段', '2021-02-21 22:06:39', '6', '6', '123456');
INSERT INTO `t_blog` VALUES ('47', '\0', '\0', 'vector 里面加了synchronized关键字 可以安全 并发同步\r\n\r\n\r\n<div id=\"content_views\" class=\"htmledit_views\">\r\n                    <p>最近面试经常遇到java集合类的问题，上网搜了一下，做个笔记</p> \r\n<p><img alt=\"\" class=\"has\" height=\"519\" src=\"https://img-blog.csdnimg.cn/20190327162145703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNzExMDkx,size_16,color_FFFFFF,t_70\" width=\"767\"></p> \r\n<p>百度的图</p> \r\n<p>集合<span style=\"color:#f33b45;\">类</span>型主要有3种：set(集）、list(列表）和map(映射)。</p> \r\n<p>集合<span style=\"color:#f33b45;\">接口</span>分为：Collection和Map，list、set实现了Collection接口</p> \r\n<p>&nbsp;</p> \r\n<p><span style=\"color:#f33b45;\">List总结</span>：</p> \r\n<p>可以重复，通过索引取出加入数据，顺序与插入顺序一致，可以含有null元素</p> \r\n<p><span style=\"color:#f33b45;\">ArrayList</span>:底层数据结构使数组结构array，查询速度快，增删改慢，因为是一种类似数组的形式进行存储，因此它的随机访问速度极快；</p> \r\n<p><span style=\"color:#f33b45;\">Vector</span>：底层是数组结构array，与ArrayList相同，查询速度快，增删改慢；</p> \r\n<p><span style=\"color:#f33b45;\">LinkedList</span>:底层使用链表结构，增删速度快，查询稍慢；</p> \r\n<p><span style=\"color:#f33b45;\">ArrayList与Vector的区别</span><span style=\"color:#ffbb66;\">：</span></p> \r\n<p>1.如果集合中的元素数量大于当前集合数组的长度时，Vector的增长率是目前数组长度的100%，而ArryaList增长率为目前数组长度的50%。所以，如果集合中使用数据量比较大的数据，用Vector有一定优势</p> \r\n<p>2.线程同步ArrayList是线程不同步，所以Vector线程安全，但是因为每个方法都加上了synchronized，所以在效率上小于ArrayList</p> \r\n<p><span style=\"color:#f33b45;\">Set总结：</span></p> \r\n<p>数据无序且唯一,实现类都不是线程安全的类，解决方案：Set set = Collections.sysnchronizedSet(Set对象);&nbsp; &nbsp;&nbsp;</p> \r\n<p><span style=\"color:#f33b45;\">HashSet</span>：是Set接口（Set接口是继承了Collection接口的）最常用的实现类，顾名思义，底层是用了哈希表（散列/hash）算法。其底层其实也是一个数组，存在的意义是提供查询速度，插入的速度也是比较快，但是适用于少量数据的插入操作，判断两个对象是否相等的规则：1、equals比较为true；2、hashCode值相同。要求：要求存在在哈希表中的对象元素都得覆盖equals和hashCode方法。</p> \r\n<p><span style=\"color:#f33b45;\">LinkedHashSet</span>：继承了HashSet类，所以它的底层用的也是哈希表的数据结构，但因为<span style=\"color:#f33b45;\">保持数据的先后添加顺序</span>，所以又加了链表结构，但因为多加了一种数据结构，所以效率较低，不建议使用，如果要求一个集合急要保证元素不重复，也需要记录元素的先后添加顺序，才选择使用LinkedHashSet</p> \r\n<p><span style=\"color:#f33b45;\">TreeSet</span>：Set接口的实现类，也拥有set接口的一般特性，但是不同的是他也实现了SortSet接口，它底层采用的是红黑树算法（红黑树就是满足一下红黑性质的二叉搜索树：①每个节点是黑色或者红色②根节点是黑色的③每个叶子结点是黑色的④如果一个节点是红色的，那么他的两个子节点是黑色的⑤对每个节点，从该节点到其所有的后代叶子结点的简单路径上，仅包含相同数目的黑色结点，红黑树是许多“平衡”搜索树的一种，可以保证在最坏情况下的基本操作集合的时间复杂度为O(lgn)。普及：二叉搜索树的性质：它或者是一棵空树；或者是具有下列性质的二叉树：若左子树不空，则左子树上所有结点的值均小于它的根结点的值；若右子树不空，则右子树上所有结点的值均大于它的根结点的值；左、右子树也分别为二叉排序树。若子树为空，查找不成功。），要注意的是在TreeSet集合中只能存储相同类型对象的引用。</p> \r\n<p>Tree最重要的就是它的两种排序方式：自然排序和客户端排序</p> \r\n<p>自然排序；实现了Comparable接口，所以TreeSet可以调用对象的ComparableTo()方法来比较集合的大小，然后进行升序排序，这种排序方式叫做自然排序。其中实现了Comparable接口的还有BigDecimal、BigInteger、Byte、Double、Float、Integer、Long、Short（按照数字大小排序）、Character（按照Unicode值的数字大小进行排序）String（按照字符串中字符的Unicode值进行排序）类等。<br> 客户化排序：其实就是实现java.util.Comparator&lt;Type&gt;接口提供的具体的排序方式，&lt;Type&gt; 是具体要比较对象的类型，他有个compare的方法，如compare(x,y)返回值大于0表示x大于y，以此类推，当我们希望按照自己的想法排序的时候可以重写compare方法。<br><img alt=\"\" class=\"has\" height=\"180\" src=\"https://img-blog.csdnimg.cn/2019032716570958.png\" width=\"703\"></p> \r\n<p><span style=\"color:#f33b45;\">Map总结：</span></p> \r\n<p>java的Map(映射)是一种把键对象和值对象进行映射的集合，其中每一个元素都包含了键对象和值对象，其中值对象也可以是Map类型的数据，因此，Map支持多级映射，<span style=\"color:#f33b45;\">Map中的键是唯一的，但值可以不唯一</span>，Map集合有两种实现，一种是利用哈希表来完成的叫做HashMap，它和HashSet都是利用哈希表来完成的，区别其实就是在哈希表的每个桶中，HashSet只有key，而HashMap在每个key上挂了一个value；另一种就是TreeMap，它实现了SortMap接口，也就是使用了红黑树的数据结构，和TreeSet一样也能实现自然排序和客户化排序两种排序方式，而哈希表不提供排序。<br><span style=\"color:#f33b45;\">HashMap</span>：哈希表的实现原理中，先采用一个数组表示位桶，每个位桶的实现在1.8之前都是使用链表，但当每个位桶的数据较多的时候，链表查询的效率就会不高，因此在1.8之后，当位桶的数据超过阈值（8）的时候，就会采用红黑树来存储该位桶的数据（在阈值之前还是使用链表来进行存储），所以，哈希表的实现包括数组+链表+红黑树，在使用哈希表的集合中我们都认为他们的增删改查操作的时间复杂度都是O(1)的，不过常数项很大，因为哈希函数在进行计算的代价比较高,HashMap和Hashtable类似，不同之处在于HashMap是非同步的，并且<span style=\"color:#3399ea;\">允许null</span>，即null value和null key。，但是将HashMap视为Collection时（values()方法可返回Collection），其迭代子操作时间开销和HashMap 的容量成比例。因此，如果迭代操作的性能相当重要的话，不要将HashMap的初始化容量设得过高，或者load factor过低。</p> \r\n<p><span style=\"color:#f33b45;\">TreeMap：</span>TreeMap 是一个有序的key-value集合，它是通过红黑树实现的。TreeMap 继承于AbstractMap，所以它是一个Map，即一个key-value集合。TreeMap 实现了NavigableMap接口，意味着它支持一系列的导航方法。比如返回有序的key集合。TreeMap 实现了Cloneable接口，意味着它能被克隆。TreeMap 实现了java.io.Serializable接口，意味着它支持序列化。</p> \r\n<p>TreeMap基于红黑树（Red-Black tree）实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。TreeMap的基本操作 containsKey、get、put 和 remove 的时间复杂度是 log(n) 。另外，TreeMap是非同步的。 它的iterator 方法返回的迭代器是fail-fastl的。</p> \r\n<p><span style=\"color:#f33b45;\">HashTable</span>:Hashtable继承Map接口，实现一个key-value映射的哈希表。任何<span style=\"color:#3399ea;\">非空</span>（non-null）的对象都可作为key或者value，<span style=\"color:#3399ea;\">线程安全</span>。</p> \r\n<p><img alt=\"\" class=\"has\" height=\"502\" src=\"https://img-blog.csdnimg.cn/20190327175421590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNzExMDkx,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\r\n                </div>', '2021-02-23 16:20:55', '1', '1', '原创', '', '', '\0', 'JAVA集合', '2021-02-23 18:01:25', '12', '2', '123456');
INSERT INTO `t_blog` VALUES ('48', '\0', '\0', '如果if (check(mid)) 条件成立，首先考虑一下答案在左区间还是右区间，如果答案在左区间并且mid也可能是答案，那么就要按[l, mid], [mid + 1, r]来划分；如果答案在右区间并且mid也可能是答案，那么就要按[l, mid - 1], [mid, r]来划分。\r\n\r\n```c++\r\n版本1\r\n当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1;，计算mid时不需要加1。\r\n\r\nC++ 代码模板：\r\nint bsearch_1(int l, int r)\r\n{\r\n    while (l < r)\r\n    {\r\n        int mid = l + r >> 1;\r\n        if (check(mid)) r = mid;\r\n        else l = mid + 1;\r\n    }\r\n    return l;\r\n}\r\n```\r\n版本2\r\n当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid;，此时为了防止死循环，计算mid时需要加1。\r\n```c++\r\nC++ 代码模板：\r\nint bsearch_2(int l, int r)\r\n{\r\n    while (l < r)\r\n    {\r\n        int mid = l + r + 1 >> 1;\r\n        if (check(mid)) l = mid;\r\n        else r = mid - 1;\r\n    }\r\n    return l;\r\n}\r\n```\r\n作者：yxc\r\n链接：https://www.acwing.com/blog/content/31/\r\n来源：AcWing\r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。', '2021-02-24 11:10:18', 'erf', '二分法', '原创', '', '', '\0', '二分', '2021-02-24 11:10:18', '3', '1', '123456');
INSERT INTO `t_blog` VALUES ('49', '\0', '\0', '## 举例子找目标值\r\n找一个从左往右第一个大于等于target的\r\n[l,mid][mid+1,r]\r\n在左边，所以左边的mid 必须要取到\r\n\r\n相反\r\n找一个从右往左第一个小于等于target的\r\n[l,mid][mid,r];\r\n在右区间\r\n所以区间赢变成\r\n[mid,r] + [l,mid- 1]\r\n```c++\r\nint bsearch_1(int l, int r,int arr[],int NumberToFind)\r\n        {\r\n            while (l < r)\r\n            {\r\n                int mid = l + r >> 1;\r\n                if (arr[mid] >= NumberToFind) r = mid;\r\n                else l = mid + 1;\r\n            }\r\n            printf(\"%d\",l);\r\n            return l;\r\n        }\r\n        int main()\r\n        {\r\n            int arr[5] = {0,1,3,4,5};\r\n            bsearch_1(0,4,arr,2);\r\n\r\n            return 0;\r\n        }\r\n\r\n        bsearch_1(0,4,arr,2);\r\n        这里寻找的是2， 元素不在数组里，则会找到从左往右数第一个 >= NumberToFind的元素位置，就是arr[2]\r\n        bsearch_1(0,4,arr,-10);\r\n        如果这里寻找-10,元素不在数组里，则会找到从左往右数第一个 >= NumberToFind的元素位置，就是arr[0]\r\n        bsearch_1(0,4,arr,20);\r\n        如果这里寻找20,元素不在数组里,会找到arr[4]\r\n\r\n\r\n\r\n\r\n\r\n\r\n        第二种类\r\n\r\n        int bsearch_2(int l, int r)\r\n        {\r\n            while (l < r)\r\n            {\r\n                int mid = l + r + 1 >> 1;\r\n                if (check(mid)) l = mid;\r\n                else r = mid - 1;\r\n            }\r\n            return l;\r\n        }\r\n\r\n\r\n\r\n        #include <stdio.h>\r\n\r\n        int bsearch_1(int l, int r,int arr[],int NumberToFind)\r\n        {\r\n            while (l < r)\r\n            {\r\n                int mid = l + r + 1>> 1;\r\n                    if (arr[mid] <= NumberToFind) l = mid;\r\n                else r = mid - 1;\r\n            }\r\n            printf(\"%d\",l);\r\n            return l;\r\n        }\r\n        int main()\r\n        {\r\n            int arr[5] = {0,1,3,4,5};\r\n            bsearch_1(0,4,arr,4);\r\n\r\n            return 0;\r\n        }\r\n\r\n\r\n        则会找到第一个从右往左数 <= NumberToFind的元素位置!\r\n```c++\r\n ', '2021-02-28 21:44:45', 'AC', 'AC', '原创', '', '', '\0', '二分', '2021-02-28 22:09:26', '4', '1', '123456');
INSERT INTO `t_blog` VALUES ('50', '\0', '', 'redis击穿 非常热点，然后大量数据落到redis缓存，失效了，然后落到数据库上。  \r\n★解决方式也很简单，可以将热点数据设置为永远不过期；或者基于 redis or zookeeper 实现互斥锁，等待第一个请求构建完缓存之后，再释放锁，进而其它请求才能通过该 key 访问数据。  \r\n\r\nredis穿透 黑客大量访问redis不存在的，导致失效。\r\n解决方式很简单，每次系统 A 从数据库中只要没查到，就写一个空值到缓存里去，比如 set -999 UNKNOWN。然后设置一个过期时间，这样的话，下次有相同的 key 来访问的时候，在缓存失效之前，都可以直接从缓存中取数据。\r\n***布隆过滤器***\r\n\r\nredis缓存雪崩\r\n事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。主从复制，读写分离，提高负载能力。\r\n事中：本地 ehcache 缓存 + hystrix 限流&降级，避免 MySQL 被打死。\r\n事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。\r\n\r\n# 一、maven\r\n实际上使用Spring Data Redis操作Redis，\r\n\r\n1、创建maven工程\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.hhzhu</groupId>\r\n    <artifactId>redis_practice</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <parent>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <version>2.1.5.RELEASE</version>\r\n\r\n    </parent>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-redis</artifactId>\r\n        </dependency>\r\n<!--连接池-->\r\n        <dependency>\r\n            <groupId>org.apache.commons</groupId>\r\n            <artifactId>commons-pool2</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n\r\n</project>\r\n```\r\n# 二、创建实体类，实现序列化接口\r\n```java\r\npackage com.hhzhu.pojo;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Date;\r\n\r\n/**\r\n * Description:\r\n *\r\n * @author ZhuHh\r\n * @data Create on 2020/3/15\r\n */\r\n@Data\r\n//实现序列化接口，否则无法存入redis\r\npublic class Student implements Serializable {\r\n    private Integer id;\r\n    private String name;\r\n    private Double score;\r\n    private Date birthday;\r\n}\r\n```\r\n# 3、创建控制器\r\n```java\r\npackage com.hhzhu.controller;\r\n\r\nimport com.hhzhu.pojo.Student;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * Description:\r\n *\r\n * @author ZhuHh\r\n * @data Create on 2020/3/15\r\n */\r\n@RestController\r\npublic class StudentHandler {\r\n\r\n    @Autowired\r\n    private RedisTemplate redisTemplate;\r\n\r\n    @PostMapping(\"/set\")\r\n    //Request将json数据转换成java对象\r\n    public void set(@RequestBody Student student){\r\n        redisTemplate.opsForValue().set(\"student\",student);\r\n\r\n    }\r\n}\r\n```\r\n\r\n# 四、创建配置文件appliacation.yml\r\n```yml\r\nspring:\r\n  redis:\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n	\r\n```\r\n#五、CRUD\r\n```java\r\npackage com.hhzhu.controller;\r\n\r\nimport com.hhzhu.pojo.Student;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n/**\r\n * Description:\r\n *\r\n * @author ZhuHh\r\n * @data Create on 2020/3/15\r\n */\r\n@RestController\r\npublic class StudentHandler {\r\n\r\n    @Autowired\r\n    private RedisTemplate redisTemplate;\r\n\r\n    @PostMapping(\"/set\")\r\n    //Request将json数据转换成java对象\r\n    public void set(@RequestBody Student student){\r\n        redisTemplate.opsForValue().set(\"student\",student);\r\n\r\n    }\r\n\r\n    @GetMapping(\"/get/{key}\")\r\n    public Student get(@PathVariable(\"key\") String key){\r\n        return (Student) redisTemplate.opsForValue().get(key);\r\n    }\r\n\r\n    @DeleteMapping(\"/delete/{key}\")\r\n    public boolean delete(@PathVariable(\"key\") String key){\r\n        redisTemplate.delete(key);\r\n        return redisTemplate.hasKey(key);\r\n    }\r\n}\r\n```\r\n', '2021-03-03 11:53:15', '1', '1', '原创', '', '', '\0', 'spring boot 引入redis', '2021-03-03 12:12:46', '7', '6', '123456');
INSERT INTO `t_blog` VALUES ('51', '\0', '\0', '![](http://blog.bupt.ltd:9999/27457905-9124-4811-a0ab-e6d64f2025d8.png)\r\n我们来拆解下上图，我们此时 temp1 指向元素为 6，temp2 指向元素为 2, nums[temp1] > temp[temp2]，则此时我们需要将 temp2 指向的元素存入临时数组中，又因为每个小集合中的元素都是有序的，所以 temp1 后面的元素也一定大于 2，那么我们就可以根据 temp1 的索引得出逆序对中包含 2 的逆序对个数，则是 mid - temp + 1。\r\n\r\n ', '2021-03-08 18:48:19', '1', '1', '原创', '', '', '\0', '逆序对', '2021-03-08 18:48:19', '5', '1', '123456');
INSERT INTO `t_blog` VALUES ('52', '\0', '\0', 'wait与sleep区别?\r\n对于sleep()方法，该方法是属于Thread类中的。而wait()方法，则是属于Object类中的。\r\nsleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。\r\n在调用sleep()方法的过程中，线程不会释放对象锁。\r\n而当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。\r\n\r\n\r\n死锁例子\r\n```java\r\n\r\nclass test{\r\n    public static void main(String args[])\r\n    {\r\n        A a = new A();\r\n        B b = new B();\r\n        new Thread(()->{\r\n            synchronized(a)\r\n            {\r\n                a.get();\r\n                \r\n                try{\r\n                    Thread.sleep(500);\r\n                }catch(Exception e)\r\n                {\r\n                    \r\n                }\r\n                synchronized(b)\r\n                {\r\n                    a.set();\r\n                }\r\n                \r\n            }\r\n        },\"A\");\r\n        \r\n         new Thread(()->{\r\n            synchronized(a)\r\n            {\r\n                a.get();\r\n                \r\n                try{\r\n                    Thread.sleep(500);\r\n                }catch(Exception e)\r\n                {\r\n                    \r\n                }\r\n                synchronized(b)\r\n                {\r\n                    a.set();\r\n                }\r\n                \r\n            }\r\n        },\"B\");\r\n        \r\n    }\r\n}\r\n\r\nclass A{\r\n    public void get()\r\n    {\r\n        System.out.println(\"B:我自动了， 请求你的资源\");\r\n        \r\n    }\r\n     public void set()\r\n    {\r\n        System.out.println(\"A资源请求好了\");\r\n        \r\n    }\r\n    \r\n}\r\n\r\nclass B{\r\n    public void get()\r\n    {\r\n        System.out.println(\"A:我自动了， 请求你的资源\");\r\n        \r\n    }\r\n     public void set()\r\n    {\r\n        System.out.println(\"B资源请求好了\");\r\n        \r\n    }\r\n    \r\n}\r\n```\r\n', '2021-03-10 12:05:59', 'http://blog.bupt.ltd:9999/7fd6ace4-0ff6-429b-9500-17eb0dd65b7e.png', 'http://blog.bupt.ltd:9999/7fd6ace4-0ff6-429b-9500-17eb0dd65b7e.png', '原创', '', '', '\0', 'wait、sleep 死锁', '2021-03-10 12:05:59', '7', '1', '123456');
INSERT INTO `t_blog` VALUES ('53', '\0', '\0', '```java\r\npublic class Solution {\r\n    public static void main(String args[])\r\n    {\r\n        Semaphore rw = 1; //用于实现对共享文件的互斥访问\r\n        int count = 0 ;//记录当前有几个读进程在访问文件\r\n        semaphore mutex = 1;//用于保证对count的互斥访问\r\n        semaphore w = 1;//用于实现“写优先”\r\n        \r\n        \r\n    }\r\n    public int Writer() {\r\n        while(1)\r\n        {\r\n            //因为读者多  写者少，所以如果就这样 读者一直有 写者就会被阻塞.\r\n            p(w)\r\n            p(rw)信号量机制相当于对文件就行上锁\r\n            写文件\r\n            v(rw)/写完解锁\r\n            p(v)\r\n                \r\n        }\r\n\r\n    }\r\n    \r\n    public int Reader()\r\n    {\r\n    while(1)\r\n    {\r\n\r\n        p(w)\r\n        \r\n        if(count==0)\r\n            p(rw)\r\n         \r\n         p(mutex)\r\n         count++;\r\n        v(mutex)\r\n            \r\n            v(w);//放到这里 队列中读写的优先级就一样了。 \r\n			来一个写者  四五个读者在进行读 计数count++后 \r\n			w信号量释放 写者就可以去p(w) 防止读者再进来。\r\n			如果没有这个话，\r\n        \r\n		读者会一直占着，写这就会饿死\r\n            \r\n			读文件\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            p(mutex)\r\n            count--;\r\n            v(mutex)\r\n            if(count==0)\r\n            v(rw);\r\n        \r\n    }\r\n    }\r\n}\r\n```\r\n', '2021-03-10 14:48:56', '1', '1', '原创', '', '', '\0', '读写锁', '2021-03-10 14:49:26', '9', '5', '123456');
INSERT INTO `t_blog` VALUES ('54', '\0', '\0', '用户态 解释一下\r\n内核态\r\n\r\n自旋锁  //举例自旋锁\r\nsynchronized锁优化\r\n\r\n线程和进程区别\r\n\r\nhashmap 说一下\r\n\r\nmysql索引\r\n我自己说的B+树   B+树源代码问我写过没，我说没写过\r\n\r\n线程池、线程池参数 大小\r\n线程池建多了有什么影响。\r\n\r\n线程线程复用 了解过？ 没有。\r\n\r\n可重入锁:指的是同一个线程外层函数获得锁之后,内层仍然能获取该锁,在同一个线程在外层方法获取锁的时候,在进入内层方法会自动获取该锁\r\nCAS\r\nABA问题\r\n\r\n进程死锁\r\n死锁代码 写一个（没写出来。）\r\n\r\n乐观锁悲观锁\r\n\r\nwait sleep运行后 资源？（说了一般般）\r\n\r\n类装载机制，然后回答了，又问有没有什么可以打破这个机制（双亲委派）的？\r\n编译、解析、验证、初始化\r\n\r\nGC标记清楚算法 、压缩算法在哪里 老年区\r\n\r\n运行时数据区各个都是干什么的 堆、方法区、本地方法栈\r\n\r\n\r\n快速排序，紧张分区间写成l+r>>1 后面给面试官详细叙述了过程。面试官帮我说可能是编译器没法调试，欸菜了菜了！！\r\n\r\n数组、链表\r\n\r\n队列、栈\r\n\r\nmysql索引以及原理\r\n\r\n反问：\r\n我问我进需要干什么阿，然后面试官说 看你是客户端的需要开发业务吧\r\n然后我还问有没有什么锻炼的地方。 。。。\r\n\r\nend', '2021-03-10 14:50:36', '1', '1', '原创', '', '', '\0', '字节一面面经', '2021-03-10 14:50:36', '3', '10', '123456');
INSERT INTO `t_blog` VALUES ('55', '\0', '\0', '![](http://blog.bupt.ltd:9999/027155e6-ab69-4585-b762-8ab79e9f1ae3.png)\r\n开辟资源替换状态ack可靠性\r\n\r\n三次握手建立连接\r\n![](http://blog.bupt.ltd:9999/f6334c0d-7099-401f-9285-6455083ebf85.png)\r\n![](http://blog.bupt.ltd:9999/6a8d325c-8635-4bd6-b4f3-978afb5d44a0.png)\r\nsocket资源\r\n发送队列、接收队列\r\n netstat -natp\r\n reve-Q\r\n send-Q\r\n 程序是内核交互\r\n 发送接受队列由内核实现\r\n IO模型\r\n \r\n socket套接字\r\n 插座插头关系\r\n 换成四元组\r\n 源ip+port\r\n 加目的ip+port\r\n 能够表示绝对唯一的连接。客户端、服务端通信。\r\n \r\n 端口号数量65535\r\n \r\n ![](http://blog.bupt.ltd:9999/17df6177-373c-43a6-9aac-07fed6095a21.png)\r\n socket要监听\r\n 就像mysql 通过netstat natp查看\r\n 只要任何源ip地址加*（*）端口号 到达我本地任何ip的3306端口号就会转到相应的进程 比如mysqlq\r\n \r\n \r\n \r\n 释放资源\r\n ![](http://blog.bupt.ltd:9999/f3409d03-5943-457d-9641-98a77e3e3dc6.png)\r\n 服务端还没发完假如就客户端直接释放资源了，\r\n 服务端还剩一些没发完，连接已经没了。这就不可靠了。\r\n \r\n Socket是应用层与传输层一个抽象接口。\r\n ![](http://blog.bupt.ltd:9999/1f76024d-d794-4a4e-99de-7d1715318f3a.png)ip+端口号能够表示唯一进程 PID并不能\r\n ![](https://img2020.cnblogs.com/blog/1648896/202103/1648896-20210310184546047-1679639922.png)\r\n \r\n 内核是通过网卡搬运\r\n TCP是拆包粘包\r\n 、应用空间也有  队列 堆积一起 \r\n \r\n ', '2021-03-10 17:58:29', '1', '1', '原创', '', '', '\0', 'TCP/IP', '2021-03-10 18:54:54', '16', '6', '123456');
INSERT INTO `t_blog` VALUES ('56', '\0', '\0', '![](http://blog.bupt.ltd:9999/7225c00c-2ef6-4bd6-83c9-ba0e7e9508d8.png)\r\nMySQL主从复制是一个异步的复制过程，主库发送更新事件到从库，从库读取更新记录，并执行更新记录，使得从库的内容与主库保持一致。  \r\n1、主数据库会写入到binlog日志文件当中,主库中保存所有更新事件日志的二进制文件。   \r\n2、每当有从库连接的时候就会创建I/O线程请求--发送内容到从库。  \r\n3、IO线程写到relay log日志文件当中。  \r\n4、slave从数据库读日志文件，更新记录。  \r\n\r\n![](http://blog.bupt.ltd:9999/0e947b1c-396b-4af9-85c7-56c981a48f8c.png)\r\n\r\nrow修改细节容易理解 row记录了数据被修改成什么形式，日志文件会导致很大。\r\n![](http://blog.bupt.ltd:9999/1b7296b8-749a-4463-ad77-790e0823616e.png)\r\n\r\n\r\n基于什么信息\r\n只记录了sql语句  不知道在哪个表背景下或者什么联合查询等等\r\n![](http://blog.bupt.ltd:9999/754a3b38-a380-45c6-8d83-8905ad79e6ba.png)\r\n\r\n![](http://blog.bupt.ltd:9999/07fd8e76-3de1-4f1a-a5f2-8e14a9e43fbb.png)IO线程\r\n\r\n<iframe src=\"//player.bilibili.com/player.html?aid=844518183&bvid=BV1u54y1a7ns&cid=308655477&page=1\" scrolling=\"no\" border=\"10\" frameborder=\"no\" height=\"600px\" width=\"400px\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>', '2021-03-11 11:43:20', '1', 'http://blog.bupt.ltd:9999/0e947b1c-396b-4af9-85c7-56c981a48f8c.png', '原创', '', '', '\0', 'MySQL主从复制', '2021-03-21 14:46:22', '14', '11', '123456');
INSERT INTO `t_blog` VALUES ('57', '\0', '', '<iframe src=\"//player.bilibili.com/player.html?aid=844518183&bvid=BV1u54y1a7ns&cid=308655477&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" width=\"100%\"\r\n height=\"100%\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n \r\n <iframe src=\"//player.bilibili.com/player.html?aid=799601259&bvid=BV1by4y187Vd&cid=309471984&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n \r\n \r\n \r\n <iframe src=\"//player.bilibili.com/player.html?aid=972035210&bvid=BV1Np4y1h75c&cid=309942071&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"false\"> </iframe>\r\n \r\n <iframe src=\"//player.bilibili.com/player.html?aid=844723129&bvid=BV1h54y187Jn&cid=311163757&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n \r\n <iframe src=\"//player.bilibili.com/player.html?aid=544624066&bvid=BV13i4y1K7aT&cid=309473159&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n \r\n <iframe src=\"//player.bilibili.com/player.html?aid=844993658&bvid=BV1p54y1b7Pc&cid=320308133&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n \r\n <iframe src=\"//player.bilibili.com/player.html?aid=247479652&bvid=BV1Rv411j7TH&cid=318801477&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>', '2021-03-11 11:45:32', '1', '1', '原创', '', '', '\0', '崽崽仙女光遇day', '2021-04-06 21:06:44', '29', '1', '123456');
INSERT INTO `t_blog` VALUES ('58', '\0', '\0', '```java\r\npackage com.lrm;\r\n\r\nimport org.springframework.util.StringUtils;\r\n\r\nimport javax.crypto.Cipher;\r\nimport java.security.*;\r\nimport java.security.interfaces.RSAPrivateKey;\r\nimport java.security.interfaces.RSAPublicKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\n/**\r\n * RSA 加密算法是目前最有影响力的 公钥加密算法，并且被普遍认为是目前 最优秀的公钥方案 之一。RSA 是第一个能同时用于 加密 和 数字签名 的算法，它能够 抵抗 到目前为止已知的 所有密码攻击，已被 ISO 推荐为公钥数据加密标准。\r\n */\r\nclass RSAUtils {\r\n\r\n    /**\r\n     * 加密（对外暴露）\r\n     * 如果使用 公钥 对数据 进行加密，只有用对应的 私钥 才能 进行解密。\r\n     * 如果使用 私钥 对数据 进行加密，只有用对应的 公钥 才能 进行解密。\r\n     *\r\n     * @param keyStr\r\n     * @param data\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public static String encryptData(String keyStr, String data, Boolean isPublicKey) throws Exception {\r\n        if (StringUtils.isEmpty(keyStr)) {\r\n            return \"\";\r\n        }\r\n        return encryptBASE64(encrypt(getKey(keyStr, isPublicKey), data.getBytes()));\r\n    }\r\n\r\n    /**\r\n     * 解密（对外暴露）\r\n     * 如果使用 公钥 对数据 进行加密，只有用对应的 私钥 才能 进行解密。\r\n     * 如果使用 私钥 对数据 进行加密，只有用对应的 公钥 才能 进行解密。\r\n     *\r\n     * @param keyStr\r\n     * @param data\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public static String decryptData(String keyStr, String data, Boolean isPublicKey) throws Exception {\r\n        if (StringUtils.isEmpty(keyStr)) {\r\n            return \"\";\r\n        }\r\n        return new String(decrypt(getKey(keyStr, isPublicKey), decryptBASE64(data)), \"UTF-8\");\r\n    }\r\n\r\n    /**\r\n     * 加密\r\n     *\r\n     * @param key\r\n     * @param srcBytes\r\n     * @return\r\n     */\r\n    private static byte[] encrypt(Key key, byte[] srcBytes) {\r\n        if (key != null) {\r\n            try {\r\n                //Cipher负责完成加密或解密工作，基于RSA\r\n                Cipher cipher = Cipher.getInstance(\"RSA\");\r\n                //对Cipher对象进行初始化\r\n                cipher.init(Cipher.ENCRYPT_MODE, key);\r\n                //加密，并返回\r\n                return cipher.doFinal(srcBytes);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 解密\r\n     *\r\n     * @param key\r\n     * @param encBytes\r\n     * @return\r\n     */\r\n    private static byte[] decrypt(Key key, byte[] encBytes) {\r\n        if (key != null) {\r\n            try {\r\n                Cipher cipher = Cipher.getInstance(\"RSA\");\r\n                //对Cipher对象进行初始化\r\n                cipher.init(Cipher.DECRYPT_MODE, key);\r\n                //解密并返回结果\r\n                return cipher.doFinal(encBytes);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 根据key获取公有或者私有key对象\r\n     *\r\n     * @param keyStr\r\n     * @param isPublicKey\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static Key getKey(String keyStr, Boolean isPublicKey) throws Exception {\r\n        if (isPublicKey) {\r\n            return getPublicKey(keyStr);\r\n        } else {\r\n            return getPrivateKey(keyStr);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据公有key获取公有key对象\r\n     *\r\n     * @param key\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static RSAPublicKey getPublicKey(String key) throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(key);\r\n        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);\r\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\r\n        return (RSAPublicKey) keyFactory.generatePublic(keySpec);\r\n    }\r\n\r\n    /**\r\n     * 根据私有key获取私有对象\r\n     *\r\n     * @param key\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static RSAPrivateKey getPrivateKey(String key) throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(key);\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\r\n        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);\r\n    }\r\n\r\n    /**\r\n     * 获取公有/私有Key\r\n     *\r\n     * @return\r\n     */\r\n    private static KeyPair getRSAKey() {\r\n        KeyPair keyPair = null;\r\n        try {\r\n            //生成公钥和私钥对，基于RSA算法生成对象\r\n            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");\r\n            //初始化密钥对生 成器，密钥大小为1024位\r\n            keyPairGen.initialize(1024);\r\n            //生成一个密钥对，保存在keyPair中\r\n            keyPair = keyPairGen.generateKeyPair();\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return keyPair;\r\n    }\r\n\r\n    /**\r\n     * 对字符串进行BASE64Decoder\r\n     *\r\n     * @param key\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static byte[] decryptBASE64(String key) {\r\n        return Base64.getDecoder().decode(key);\r\n    }\r\n\r\n    /**\r\n     * 对字节数组进行BASE64Encoder\r\n     *\r\n     * @param key\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static String encryptBASE64(byte[] key) {\r\n        return Base64.getEncoder().encodeToString(key);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // 生成的一对key保存好\r\n        try {\r\n            //得到私钥和公钥\r\n            KeyPair keyPair = getRSAKey();\r\n            RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\r\n            RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\r\n\r\n            String pubKey = encryptBASE64(publicKey.getEncoded());\r\n            String priKey = encryptBASE64(privateKey.getEncoded());\r\n            System.out.println(\"公钥：\" + pubKey);\r\n            System.out.println(\"私钥：\" + priKey);\r\n\r\n            // 测试\r\n            String message = \"201720724黄冠雅\";\r\n\r\n            System.out.println(\"明文：\" + message);\r\n            String jiami = encryptData(pubKey, message, true);\r\n            System.out.println(\"公钥加密后：\" + jiami);\r\n            String jiemi = decryptData(priKey, jiami, false);\r\n            System.out.println(\"用私钥解密后的结果是:\" + jiemi);\r\n\r\n            jiami = encryptData(priKey, message, false);\r\n            System.out.println(\"私钥加密后：\" + jiami);\r\n            jiemi = decryptData(pubKey, jiami, true);\r\n            System.out.println(\"用公钥解密后的结果是:\" + jiemi);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n```', '2021-03-13 10:51:09', '1', '1', '原创', '', '', '\0', 'DES RSA', '2021-03-13 10:51:15', '6', '1', '123456');
INSERT INTO `t_blog` VALUES ('59', '', '', '# JAVA内置锁  \r\n最开始是内置锁  \r\nsynchronized是内置锁 \r\n每个对象都包含monitor对象，通过获取monitor对象从而获取锁。 \r\n但内置锁是重量级锁，需要优化也叫监视器锁。 \r\n监视器锁直接对应底层操作系统的互斥量mutex。\r\n\r\n这种同步的方式成本非常高，包括系统调用引起的内核态与用户态切换，线程阻塞造成线程切换。被称为“重量级锁”。  \r\n\r\n# 自旋锁\r\n内核态和用户态切换不易优化。就从线程切换上进行优化。   \r\n通过自旋当没有获取锁是进行有限时间循环。然后再重新竞争。  \r\n如果锁的粒度小，锁的持有时间短。这种方案认为是可行的。\r\n能过提升很大性能。 \r\n这种通用在持有时间长，竞争不激烈也可以使用。\r\n\r\n# 自旋自适应锁\r\n自旋的时间不再固定，而是有前一个在同一个锁上的自旋时间及锁的拥有者的状态来决定：  \r\n1、如果自旋经常成功，那么就让其等待的时间更长。  \r\n2、如果经常自旋不成功，那么就让其不自旋。或时间很短。\r\n\r\n\r\n# 轻量级锁\r\n锁竞争不激烈可以使用自旋锁。如果很激烈就需要使用重量级锁。让其内核态与用户态切换，线程阻塞切换。如果竞争不是很实际，就用轻量级锁。\r\n减少无实际竞争，使用重量级锁产生的性能消耗。不需要申请互斥变量。仅仅将mark word部分字节CAS更新指向线程栈中的Lock Record。更新成功则记录锁状态为轻量级锁。  \r\n如果已经有线程获得了轻量级锁，目前发生锁竞争就要升级为重量级锁。\r\n同自旋锁相似，都是喜欢竞争不激烈的。如果竞争激烈，那么维护轻量级锁的开销浪费了。\r\n\r\n# 进一步优化——偏向锁\r\n使用锁的线程只有一个。使用轻量级的性能消耗。\r\n  使用CAS只有一次。初始化，而\r\n  \r\n  偏向锁、轻量级锁、重量级锁适用于不同的并发场景： \r\n\r\n偏向锁：无实际竞争，且将来只有第一个申请锁的线程会使用锁。   \r\n轻量级锁：无实际竞争，多个线程交替使用锁；允许短时间的锁竞争。 \r\n重量级锁：有实际竞争，且锁竞争时间长。 \r\n另外，如果锁竞争时间短，可以使用自旋锁进一步优化轻量级锁、重量级锁的性能，减少线程切换。 \r\n\r\n如果锁竞争程度逐渐提高（缓慢），那么从偏向锁逐步膨胀到重量锁，能够提高系统的整体性能。  \r\n\r\n', '2021-03-18 15:33:06', '1', 'www.4399.com', '原创', '', '', '\0', 'JAVA锁', '2021-03-18 15:33:06', '7', '2', '123456');
INSERT INTO `t_blog` VALUES ('60', '\0', '\0', '![](http://blog.bupt.ltd:9999/3b2a924b-1670-43ed-ae70-2f6a1ba646f2.png)\r\n\r\n我用的是JPA repository 他的查询是占位符形式的，而且我尝试sql注入 无法成功。应该可以防止sql注入/\r\n\r\n![](http://blog.bupt.ltd:9999/b52adb11-a253-4517-8113-277619c125af.png)', '2021-03-23 10:24:24', '1', '1', '原创', '', '', '\0', '报名网站SQL注入', '2021-03-23 10:26:40', '4', '1', '123456');
INSERT INTO `t_blog` VALUES ('61', '\0', '\0', '```python\r\nimport random\r\nfrom urllib import request\r\n\r\nfrom lxml import etree\r\n\r\nimport requests\r\n\r\nimport pandas as pd\r\n\r\nUSER_AGENT = [\'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\',\r\n              \'Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\',\r\n              ]\r\n\r\n# headers = {\r\n#     \'User-Agent\': USER_AGENT\r\n# }\r\n\r\n\r\ndef get_page(url, headers):\r\n    try:\r\n        response = requests.get(url, headers=headers)\r\n        if response.status_code == 200:\r\n            return response.text\r\n        return None\r\n    except requests.RequestException:\r\n        return None\r\n\r\n\r\ndef read(path):\r\n    X = pd.read_csv(path, sep=\"\\t\", header=None)\r\n    return X\r\n\r\n\r\ndef write(name, picurl):\r\n    picname = \'E:\\桌面2\\picture\\myself\\\\pic\\\\\' + name\r\n    if isinstance(picurl, list):\r\n        if picurl:\r\n            request.urlretrieve(picurl[0], picname + \'.jpg\')\r\n    else:\r\n        request.urlretrieve(picurl, picname + \'.jpg\')\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    path = \'test.txt\'\r\n    X = read(path)\r\n\r\n    id = X[0]\r\n    name = X[1]\r\n    for idx, i in enumerate(id):\r\n\r\n        print(idx)\r\n        print(name[idx])\r\n        url = \"https://movie.douban.com/celebrity/\" + str(i) + \'/\'\r\n        user_agent = random.choice(USER_AGENT)  # 这是随机获取agent_list里的一条信息\r\n        print(user_agent)\r\n        headers = {\r\n            \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36\'\r\n        }\r\n        html = get_page(url, headers=headers)\r\n        print(html)\r\n        html = etree.HTML(html)\r\n\r\n        # 先定位到li标签，datas是一个包含25个li标签的list，就是包含25部电影信息的list\r\n        data_picurl = html.xpath(\'//div[@class=\"pic\"]/a/img/@src\')\r\n\r\n        nam = name[idx]\r\n        nam = str(nam)\r\n        n = nam.split()\r\n        if isinstance(n, list):\r\n            if n:\r\n                write(n[0], data_picurl)\r\n        else:\r\n            write(n, data_picurl)\r\n```', '2021-03-31 16:35:58', '爬虫ip被封太难了', '爬虫ip被封太难了', '原创', '', '', '', '爬虫ip被封太难了', '2021-03-31 16:35:58', '5', '1', '123456');
INSERT INTO `t_blog` VALUES ('62', '\0', '\0', 'https://github.com/jhao104/proxy_pool.git\r\nip代理池git网址\r\n\r\n![](http://blog.bupt.ltd:9999/9aa3f387-59b1-4c82-a407-5bcbc3b6dda7.png)\r\n\r\n\r\n![](http://blog.bupt.ltd:9999/aae6ba3d-796d-4be9-a785-588c16203ce5.png)\r\nip代理池设置成功\r\n```python\r\nimport requests\r\n\r\nimport random\r\nfrom urllib import request\r\nfrom lxml import etree\r\n\r\nimport pandas as pd\r\n\r\nUSER_AGENT = [\'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\',\r\n              \'Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\',\r\n              \'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)\',\r\n              \'Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\',\r\n              \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\',\r\n              \'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\',\r\n              \'Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\',\r\n              \'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\',\r\n              \'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\',\r\n              \'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.3 Mobile/14E277 Safari/603.1.30\',\r\n              \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36\']\r\n\r\n\r\ndef get_proxy():\r\n    return requests.get(\"http://127.0.0.1:5010/get/\").json()\r\n\r\n\r\ndef delete_proxy(proxy):\r\n    requests.get(\"http://127.0.0.1:5010/delete/?proxy={}\".format(proxy))\r\n\r\n\r\n# your spider code\r\ndef read(path):\r\n    X = pd.read_csv(path, sep=\"\\t\", header=None)\r\n    return X\r\n\r\n\r\ndef write(name, picurl):\r\n    picname = \'E:\\\\桌面2\\\\proxy_pool-master\\\\pic\\\\\' + name\r\n    if isinstance(picurl, list):\r\n        if picurl:\r\n            request.urlretrieve(picurl[0], picname + \'.jpg\')\r\n    else:\r\n        request.urlretrieve(picurl, picname + \'.jpg\')\r\n\r\n\r\ndef getHtml():\r\n    # ....\r\n    retry_count = 50\r\n    proxy = get_proxy().get(\"proxy\")\r\n\r\n    while retry_count > 0:\r\n\r\n            path = \'test.txt\'\r\n            X = read(path)\r\n\r\n            id = X[0]\r\n            name = X[1]\r\n            for idx, i in enumerate(id):\r\n\r\n                proxy = get_proxy().get(\"proxy\")\r\n                print(proxy)\r\n                print(idx)\r\n                print(name[idx])\r\n                user_agent = random.choice(USER_AGENT)  # 这是随机获取agent_list里的一条信息\r\n                headers = {\r\n                    \'User-Agent\': user_agent\r\n                }\r\n                url = \"https://movie.douban.com/celebrity/\" + str(i) + \'/\'\r\n\r\n                html = requests.get(url, headers=headers, proxies={\"http\": \"http://{}\".format(proxy)})\r\n\r\n\r\n                html = etree.HTML(html.text)\r\n                # 先定位到li标签，datas是一个包含25个li标签的list，就是包含25部电影信息的list\r\n                data_picurl = html.xpath(\'//div[@class=\"pic\"]/a/img/@src\')\r\n                print(data_picurl)\r\n                nam = name[idx]\r\n                nam = str(nam)\r\n                n = nam.split()\r\n                if isinstance(n, list):\r\n                    if n:\r\n                        write(n[0], data_picurl)\r\n                else:\r\n                    write(n, data_picurl)\r\n                # 使用代理访问\r\n\r\n\r\n    # 删除代理池中代理\r\n    delete_proxy(proxy)\r\n    return None\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    getHtml()\r\n\r\n```', '2021-04-01 16:53:02', '爬虫代理池', '爬虫代理池', '原创', '', '', '', 'IP爬虫代理池', '2021-04-01 17:25:30', '47', '1', '123456');
INSERT INTO `t_blog` VALUES ('63', '\0', '', '# 爬虫2.0.0\r\n1、本文新增了代理池  \r\n2、本文模拟了大量浏览器头部  \r\n3、本文不从数据库拿取名字直接从html获取名字，这样解决了之前名字是nan的时候难以解决的错误。  \r\n4、本文修复了中文名和英文名为图片名称的错误，命名更加灵活，含有中文名的抓取并分割字符串第一部分，以首部为字母的开头不再划分直接命名。  \r\n5、后续将会优化主函数过长问题，有些冗余，将会划分成多个函数。\r\n6、后续将更新代理池的使用。  \r\n```python\r\nimport time\r\nimport numpy as np\r\nimport requests\r\n\r\nimport random\r\nfrom urllib import request\r\nfrom lxml import etree\r\n\r\nimport pandas as pd\r\n \r\n# 模拟了大量浏览器头部\r\nUSER_AGENT = [\'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\',\r\n              \'Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\',\r\n              \'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)\',\r\n              \'Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\',\r\n              \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\',\r\n              \'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\',\r\n              \'Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\',\r\n              \'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\',\r\n              \'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12\',\r\n              \'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)\',\r\n              \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\',\r\n              \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36\']\r\n\r\n\r\ndef get_proxy():\r\n    return requests.get(  # 获取代理请求\r\n        \"http://http.tiqu.letecs.com/getip3?num=101&type=2&pro=330000&city=330700&yys=0&port=1&time=1&ts=0&ys=1&cs=1&lb=1&sb=0&pb=4&mr=1&regions=&gm=4\").json()\r\n\r\n\r\ndef delete_proxy(proxy):  # 删除代理\r\n    requests.get(\"http://127.0.0.1:5010/delete/?proxy={}\".format(proxy))\r\n\r\n\r\n# your spider code\r\ndef read(path):     # 通过pd 读文件\r\n    X = pd.read_csv(path, sep=\"\\t\", header=None)\r\n    return X\r\n\r\n\r\ndef write(name, picurl):\r\n    # print(name)\r\n    picname = \'E:\\\\桌面2\\\\proxy_pool-master\\\\director_pic\\\\\' + name  # 文件目录\r\n    # print(picname)\r\n    if isinstance(picurl, list):\r\n        if picurl:\r\n            request.urlretrieve(picurl[0], picname + \'.jpg\')   # 保存图片 下载图片到本地的文件夹\r\n    else:\r\n        request.urlretrieve(picurl, picname + \'.jpg\')\r\n\r\n\r\ndef getHtml():\r\n    # ....\r\n\r\n    path = \'test.txt\'  # 读文件\r\n    X = read(path)\r\n    ip = \'ip.txt\'\r\n    I = read(ip)\r\n    IP = I[0]\r\n    id = X[0]\r\n\r\n    j = 0\r\n    for idx, i in enumerate(id):\r\n        try:\r\n            # proxy = get_proxy().get(\"proxy\")\r\n\r\n            print(idx)\r\n\r\n            proxy = IP[j]\r\n            print(proxy)\r\n            if idx % 10 == 0:  # 降低ip重复率，每十次更换ip到末尾从头再来\r\n                j = j + 1\r\n                if j > 30:\r\n                    j = 0\r\n            user_agent = random.choice(USER_AGENT)  # 这是随机获取agent_list里的一条信息\r\n            print(user_agent)\r\n            headers = {\r\n                \'User-Agent\': user_agent  # 代理商\r\n            }\r\n            url = \"https://movie.douban.com/celebrity/\" + str(i) + \'/\'  # 豆瓣+id\r\n\r\n            html = requests.get(url, headers=headers, proxies={\"http\": \"http://{}\".format(proxy)})  # 请求代理\r\n            # html = requests.get(url, headers=headers)\r\n            # print(html.text)\r\n\r\n            html = etree.HTML(html.text)  # etree 解析\r\n\r\n            data_picurl = html.xpath(\'//div[@id=\"headline\"]/div[@class=\"pic\"]/a[1]/img[1]/@src\')  # 图片链接\r\n            nameurl = html.xpath(\'//div[@id=\"wrapper\"]/div[@id=\"content\"]/h1/text()\')  # 名字从html中获取不从数据库中获取\r\n            nameurl = nameurl[0]\r\n            print(nameurl)\r\n\r\n            # data_picurl = html.xpath(\'//div/div[@class=\"pic\"]/a[1]/img[@src]\')\r\n            print(data_picurl)\r\n\r\n            if \'a\' <= nameurl[0] <= \'z\' or \'A\' <= nameurl[0] <= \'Z\':  # 由于名字是有英文全称的 进行判断\r\n                try:\r\n                    nam = nameurl\r\n                    n = str(nam)\r\n                    print(n)\r\n                    write(n, data_picurl)\r\n                except OSError:\r\n                    pass\r\n                    continue\r\n            else:  # 如果是中文划分字符串\r\n                try:\r\n                    nam = nameurl\r\n                    nam = str(nam)\r\n                    n = nam.split() # 根据空格划分字符串\r\n                    print(n)\r\n                    if isinstance(n, list):  # 判断该变量是list类型吗？防止超范围\r\n                        if n:\r\n                            write(n[0], data_picurl)\r\n                    else:\r\n                        write(n, data_picurl)\r\n                        # 使用代理访问\r\n                except OSError or TypeError:  # 我们允许有少量错误出现 遇见错误直接continue 节省时间\r\n                    pass\r\n                    continue\r\n            time.sleep(1)    # 我们降低爬取的速度，减少ip被封的风险\r\n        except OSError or TypeError:\r\n            pass\r\n            continue\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    getHtml()\r\n\r\n```\r\n\r\n# process\r\n![](http://blog.bupt.ltd:9999/4e4c853d-6a2a-49e3-9cf4-0ebb2bc30230.png)', '2021-04-03 10:23:38', '爬虫更新补丁', 'http://blog.bupt.ltd:9999/4e4c853d-6a2a-49e3-9cf4-0ebb2bc30230.png', '原创', '', '', '', '爬虫2升级版', '2021-04-03 10:23:51', '21', '5', '123456');
INSERT INTO `t_blog` VALUES ('64', '', '', '<iframe src=\"//player.bilibili.com/player.html?aid=204934170&bvid=BV1zh411D7Sc&cid=318664713&page=1\" scrolling=\"no\" border=\"110\" frameborder=\"yes\" framespacing=\"0\" allowfullscreen=\"false\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=204976952&bvid=BV1Rh411D7HB&cid=318833256&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=289886687&bvid=BV11f4y1x7Pn&cid=318840871&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=714986370&bvid=BV1bX4y1g7dV&cid=318822191&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=972469977&bvid=BV1qp4y187eS&cid=318695485&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=374975525&bvid=BV1pZ4y1c7hE&cid=318668897&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=714903362&bvid=BV1GX4y1g7G7&cid=318666311&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=204506934&bvid=BV1gh411Q79V&cid=309470799&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=844518183&bvid=BV1u54y1a7ns&cid=308655477&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=887106500&bvid=BV1QK4y1K7Y6&cid=308627253&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=802022598&bvid=BV1ry4y177zk&cid=308608601&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=801946646&bvid=BV14y4y177ki&cid=306502793&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=629433221&bvid=BV18b4y1X7Ds&cid=306502192&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=416992553&bvid=BV1tV411v7Vn&cid=306495988&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>', '2021-04-06 21:11:47', '仙女', 'https://i1.hdslb.com/bfs/archive/101c8ffddbb2ee851371c0f28150ffb98448c67f.jpg@336w_190h.jpg', '原创', '', '', '', '仙女崽崽2', '2021-04-06 21:13:20', '8', '8', '123456');
INSERT INTO `t_blog` VALUES ('65', '\0', '\0', '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\r\n                <div id=\"content_views\" class=\"htmledit_views\">\r\n                    <p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">一、 Git 常用命令速查</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">git branch 查看本地所有分支<br>git status 查看当前状态&nbsp;<br>git commit 提交&nbsp;<br>git branch -a 查看所有的分支<br>git branch -r 查看远程所有分支<br>git commit -am \"init\" 提交并且加注释&nbsp;<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上&nbsp;<br>git remote show origin 显示远程库origin里的资源&nbsp;<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联&nbsp;<br>git checkout --track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config --list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m \"This is the message describing the commit\" 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm --cached a.a 移除文件(只从暂存区中删除)<br>git commit -m \"remove\" 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff --cached 或 $ git diff --staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中<br>git stash pop 将文件从临时空间pop下来<br>---------------------------------------------------------<br>git remote add origin git@github.com:username/Hello-World.git<br>git push origin master 将本地项目给提交到服务器中<br>-----------------------------------------------------------<br>git pull 本地与服务器端同步<br>-----------------------------------------------------------------<br>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。<br>git push origin serverfix:awesomebranch<br>------------------------------------------------------------------<br>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m \"log_message\" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支<br>du -hs</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">git branch 删除远程branch<br>git push origin :branch_remote_name<br>git branch -r -d branch_remote_name<br>-----------------------------------------------------------</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">初始化版本库，并提交到远程服务器端<br>mkdir WebApp<br>cd WebApp<br>git init 本地初始化<br>touch README<br>git add README 添加文件<br>git commit -m \'first commit\'<br>git remote add origin git@github.com:daixu/WebApp.git</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">增加一个远程服务器端</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">上面的命令会增加URL地址为\'git@github.com:daixu/WebApp.git\'，名称为origin的远程服务器库，以后提交代码的时候只需要使用 origin别名即可</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">二、 Git 命令速查表</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">1、常用的Git命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git add</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">添加至暂存区</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git add–interactive</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">交互式添加</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git apply</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">应用补丁</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git am</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">应用邮件格式补丁</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git annotate</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">同义词，等同于 git blame</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git archive</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">文件归档打包</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git bisect</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">二分查找</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git blame</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">文件逐行追溯</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git branch</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">分支管理</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git cat-file</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">版本库对象研究工具</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git checkout</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">检出到工作区、切换或创建分支</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git cherry-pick</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">提交拣选</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git citool</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">图形化提交，相当于 git gui&nbsp;</span>命令</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git clean</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">清除工作区未跟踪文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git clone</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">克隆版本库</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git commit</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">提交</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git config</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">查询和修改配置</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git describe</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">通过里程碑直观地显示提交ID</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git diff</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">差异比较</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git difftool</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">调用图形化差异比较工具</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git fetch</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">获取远程版本库的提交</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git format-patch</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">创建邮件格式的补丁文件。参见 git am&nbsp;</span>命令</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git grep</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">文件内容搜索定位工具</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git gui</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">基于Tcl/Tk</span>的图形化工具，侧重提交等操作</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git help</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">帮助</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git init</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">版本库初始化</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git init-db*</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">同义词，等同于 git init</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git log</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示提交日志</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">分支合并</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git mergetool</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">图形化冲突解决</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git mv</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">重命名</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git pull</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">拉回远程版本库的提交</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git push</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">推送至远程版本库</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git rebase</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">分支变基</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git rebase–interactive</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">交互式分支变基</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git reflog</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">分支等引用变更记录管理</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">远程版本库管理</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git repo-config*</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">同义词，等同于 git config</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git reset</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">重置改变分支“</span>游标”指向</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git rev-parse</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将各种引用表示法转换为哈希值等</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git revert</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">反转提交</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git rm</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">删除文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git show</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示各种类型的对象</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git stage*</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">同义词，等同于 git add</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git stash</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">保存和恢复进度</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git status</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示工作区文件状态</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git tag</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">里程碑管理</span></p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">2、对象库操作相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git commit-tree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从树对象创建提交</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git hash-object</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从标准输入或文件计算哈希值或创建对象</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git ls-files</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示工作区和暂存区文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git ls-tree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示树对象包含的文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git mktag</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">读取标准输入创建一个里程碑对象</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git mktree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">读取标准输入创建一个树对象</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git read-tree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">读取树对象到暂存区</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git update-index</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">工作区内容注册到暂存区及暂存区管理</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git unpack-file</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">创建临时文件包含指定 blob&nbsp;</span>的内容</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git write-tree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从暂存区创建一个树对象</span></p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">3、引用操作相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git check-ref-format</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">检查引用名称是否符合规范</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git for-each-ref</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">引用迭代器，用于shell</span>编程</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git ls-remote</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示远程版本库的引用</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git name-rev</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将提交ID</span>显示为友好名称</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git peek-remote*</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">过时命令，请使用 git ls-remote</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git rev-list</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示版本范围</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git show-branch</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示分支列表及拓扑关系</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git show-ref</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示本地引用</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git symbolic-ref</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示或者设置符号引用</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git update-ref</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">更新引用的指向</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git verify-tag</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">校验 GPG&nbsp;</span>签名的Tag</p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">4、版本库管理相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git count-objects</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示松散对象的数量和磁盘占用</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git filter-branch</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">版本库重构</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git fsck</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">对象库完整性检查</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git fsck-objects*</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">同义词，等同于 git fsck</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git gc</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">版本库存储优化</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git index-pack</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从打包文件创建对应的索引文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git lost-found*</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">过时，请使用 git fsck –lost-found&nbsp;</span>命令</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git pack-objects</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从标准输入读入对象ID</span>，打包到文件</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git pack-redundant</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">查找多余的 pack&nbsp;</span>文件</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git pack-refs</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将引用打包到 .git/packed-refs&nbsp;</span>文件中</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git prune</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从对象库删除过期对象</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git prune-packed</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将已经打包的松散对象删除</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git relink</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">为本地版本库中相同的对象建立硬连接</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git repack</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将版本库未打包的松散对象打包</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git show-index</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">读取包的索引文件，显示打包文件中的内容</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git unpack-objects</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从打包文件释放文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git verify-pack</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">校验对象库打包文件</span></p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">5、数据传输相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git fetch-pack</span></p></td><td colspan=\"2\" style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">执行 git fetch&nbsp;</span>或 git pull 命令时在本地执行此命令，用于从其他版本库获取缺失的对象</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git receive-pack</span></p></td><td colspan=\"2\" style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">执行 git push&nbsp;</span>命令时在远程执行的命令，用于接受推送的数据</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git send-pack</span></p></td><td colspan=\"2\" style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">执行 git push&nbsp;</span>命令时在本地执行的命令，用于向其他版本库推送数据</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git upload-archive</span></p></td><td colspan=\"2\" style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">执行 git archive –remote&nbsp;</span>命令基于远程版本库创建归档时，远程版本库执行此命令传送归档</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git upload-pack</span></p></td><td colspan=\"2\" style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">执行 git fetch&nbsp;</span>或 git pull 命令时在远程执行此命令，将对象打包、上传</p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">6、邮件相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git imap-send</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将补丁通过 IMAP&nbsp;</span>发送</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git mailinfo</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从邮件导出提交说明和补丁</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git mailsplit</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将 mbox&nbsp;</span>或 Maildir 格式邮箱中邮件逐一提取为文件</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git request-pull</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">创建包含提交间差异和执行PULL</span>操作地址的信息</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git send-email</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">发送邮件</span></p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">7、协议相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git daemon</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">实现Git</span>协议</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git http-backend</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">实现HTTP</span>协议的CGI程序，支持智能HTTP协议</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git instaweb</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">即时启动浏览器通过 gitweb&nbsp;</span>浏览当前版本库</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git shell</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">受限制的shell</span>，提供仅执行Git命令的SSH访问</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git update-server-info</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">更新哑协议需要的辅助文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git http-fetch</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">通过HTTP</span>协议获取版本库</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git http-push</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">通过HTTP/DAV</span>协议推送</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote-ext</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由Git</span>命令调用，通过外部命令提供扩展协议支持</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote-fd</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由Git</span>命令调用，使用文件描述符作为协议接口</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote-ftp</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由Git</span>命令调用，提供对FTP协议的支持</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote-ftps</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由Git</span>命令调用，提供对FTPS协议的支持</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote-http</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由Git</span>命令调用，提供对HTTP协议的支持</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote-https</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由Git</span>命令调用，提供对HTTPS协议的支持</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git remote-testgit</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">协议扩展示例脚本</span></p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">8、版本库转换和交互相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git archimport</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">导入Arch</span>版本库到Git</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git bundle</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">提交打包和解包，以便在不同版本库间传递</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git cvsexportcommit</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将Git</span>的一个提交作为一个CVS检出</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git cvsimport</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">导入CVS</span>版本库到Git。或者使用 cvs2git</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git cvsserver</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">Git</span><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">的CVS</span>协议模拟器，可供CVS命令访问Git版本库</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git fast-export</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将提交导出为 git-fast-import&nbsp;</span>格式</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git fast-import</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">其他版本库迁移至Git</span>的通用工具</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git svn</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">Git&nbsp;</span><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">作为前端操作 Subversion</span></p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">9、合并相关的辅助命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-base</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">供其他脚本调用，找到两个或多个提交最近的共同祖先</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-file</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">针对文件的两个不同版本执行三向文件合并</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-index</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">对index</span>中的冲突文件调用指定的冲突解决工具</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-octopus</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">合并两个以上分支。参见 git merge&nbsp;</span>的octopus合并策略</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-one-file</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由 git merge-index&nbsp;</span>调用的标准辅助程序</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-ours</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">合并使用本地版本，抛弃他人版本。参见 git merge&nbsp;</span>的ours合并策略</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-recursive</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">针对两个分支的三向合并。参见 git merge&nbsp;</span>的recursive合并策略</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-resolve</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">针对两个分支的三向合并。参见 git merge&nbsp;</span>的resolve合并策略</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-subtree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">子树合并。参见 git merge&nbsp;</span>的 subtree 合并策略</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git merge-tree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显式三向合并结果，不改变暂存区</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git fmt-merge-msg</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">供执行合并操作的脚本调用，用于创建一个合并提交说明</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git rerere</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">重用所记录的冲突解决方案</span></p></td></tr></tbody></table></div>\r\n<br style=\"color:rgb(69,69,69);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\">\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">10、 杂项</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<div class=\"table-box\"><table class=\"jbborder\" style=\"border-collapse:collapse;border-spacing:0px;max-width:100%;border:;text-align:center;margin-top:.54em;clear:both;color:rgb(0,0,0);font-family:tahoma, arial, \'宋体\';font-size:14px;line-height:25.2px;\"><thead><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\" width=\"200\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">命令</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(218,238,243);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;font-weight:normal;line-height:21.6px;\">简要说明</span></p></td></tr></thead><tbody><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git bisect–helper</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由 git bisect&nbsp;</span>命令调用，确认二分查找进度</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git check-attr</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示某个文件是否设置了某个属性</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git checkout-index</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从暂存区拷贝文件至工作区</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git cherry</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">查找没有合并到上游的提交</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git diff-files</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">比较暂存区和工作区，相当于 git diff –raw</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git diff-index</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">比较暂存区和版本库，相当于 git diff –cached –raw</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git diff-tree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">比较两个树对象，相当于 git diff –raw A B</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git difftool–helper</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">由 git difftool&nbsp;</span>命令调用，默认要使用的差异比较工具</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git get-tar-commit-id</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">从 git archive&nbsp;</span>创建的 tar 包中提取提交ID</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git gui–askpass</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">命令 git gui&nbsp;</span>的获取用户口令输入界面</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git notes</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">提交评论管理</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git patch-id</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">补丁过滤行号和空白字符后生成补丁唯一ID</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git quiltimport</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">将Quilt</span>补丁列表应用到当前分支</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git replace</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">提交替换</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git shortlog</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">对 git log&nbsp;</span>的汇总输出，适合于产品发布说明</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git stripspace</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">删除空行，供其他脚本调用</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git submodule</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">子模组管理</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git tar-tree</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">过时命令，请使用 git archive</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git var</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示 Git&nbsp;</span>环境变量</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git web–browse</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">启动浏览器以查看目录或文件</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git whatchanged</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">显示提交历史及每次提交的改动</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git-mergetool–lib</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">包含于其他脚本中，提供合并/</span>差异比较工具的选择和执行</p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git-parse-remote</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">包含于其他脚本中，提供操作远程版本库的函数</span></p></td></tr><tr><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#FF0000;margin:0px;padding:0px;line-height:21.6px;\">git-sh-setup</span></p></td><td style=\"margin:0px;padding:.2em .46em;border:1px solid rgb(204,204,204);background:rgb(238,238,238);\"><p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;font-size:14px;\" align=\"left\"><span style=\"font-size:12px;color:#4e4e4e;margin:0px;padding:0px;line-height:21.6px;\">包含于其他脚本中，提供 shell&nbsp;</span>编程的函数库</p></td></tr></tbody></table></div>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">下面脚本之家小编特为大家分享一个图片版的</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">Git 常用命令速查表。点击查看大图。</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"><a href=\"http://files.jb51.net/file_images/article/201409/git_big_jb51.jpg\" class=\"bPic\" style=\"background:transparent;color:rgb(0,102,153);margin:0px;padding:0px;\"><img alt=\"\" src=\"http://files.jb51.net/file_images/article/201409/git_big_jb51.jpg\" style=\"border:1px solid rgb(204,204,204);vertical-align:bottom;max-width:650px;padding:1px;width:650px;height:auto;\" width=\"1200\" height=\"1200\"></a></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"><span style=\"font-size:12px;margin:0px;padding:0px;line-height:21.6px;\">Git命令参考手册(文本版)<br></span></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\">git init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 初始化本地git仓库（创建新仓库）&nbsp;<br>git config --global user.name \"xxx\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 配置用户名&nbsp;<br>git config --global user.email \"xxx@xxx.com\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 配置邮件&nbsp;<br>git config --global color.ui true&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # git status等命令自动着色&nbsp;<br>git config --global color.status auto&nbsp;<br>git config --global color.diff auto&nbsp;<br>git config --global color.branch auto&nbsp;<br>git config --global color.interactive auto&nbsp;<br>git clone git+ssh://git@192.168.53.168/VT.git&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # clone远程仓库&nbsp;<br>git status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 查看当前版本状态（是否修改）&nbsp;<br>git add xyz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 添加xyz文件至index&nbsp;<br>git add .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 增加当前子目录下所有更改过的文件至index&nbsp;<br>git commit -m \'xxx\'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 提交&nbsp;<br>git commit --amend -m \'xxx\'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 合并上一次提交（用于反复修改）&nbsp;<br>git commit -am \'xxx\'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 将add和commit合为一步&nbsp;<br>git rm xxx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 删除index中的文件&nbsp;<br>git rm -r *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 递归删除&nbsp;<br>git log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示提交日志&nbsp;<br>git log -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示1行日志 -n为n行&nbsp;<br>git log -5<br>git log --stat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示提交日志及相关变动文件&nbsp;<br>git log -p -m&nbsp;<br>git show dfb02e6e4f2f7b573337763e5c0013802e392818&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示某个提交的详细内容&nbsp;<br>git show dfb02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 可只用commitid的前几位&nbsp;<br>git show HEAD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示HEAD提交日志&nbsp;<br>git show HEAD^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本&nbsp;<br>git tag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示已存在的tag&nbsp;<br>git tag -a v2.0 -m \'xxx\'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 增加v2.0的tag&nbsp;<br>git show v2.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示v2.0的日志及详细内容&nbsp;<br>git log v2.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示v2.0的日志&nbsp;<br>git diff&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示所有未添加至index的变更&nbsp;<br>git diff --cached&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示所有已添加index但还未commit的变更&nbsp;<br>git diff HEAD^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 比较与上一个版本的差异&nbsp;<br>git diff HEAD -- ./lib&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 比较与HEAD版本lib目录的差异&nbsp;<br>git diff origin/master..master&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 比较远程分支master上有本地分支master上没有的&nbsp;<br>git diff origin/master..master --stat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 只显示差异的文件，不显示具体内容&nbsp;<br>git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）&nbsp;<br>git branch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示本地分支&nbsp;<br>git branch --contains 50089&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示包含提交50089的分支&nbsp;<br>git branch -a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示所有分支&nbsp;<br>git branch -r&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示所有原创分支&nbsp;<br>git branch --merged&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示所有已合并到当前分支的分支&nbsp;<br>git branch --no-merged&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示所有未合并到当前分支的分支&nbsp;<br>git branch -m master master_copy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 本地分支改名&nbsp;<br>git checkout -b master_copy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 从当前分支创建新分支master_copy并检出&nbsp;<br>git checkout -b master master_copy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 上面的完整版&nbsp;<br>git checkout features/performance&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 检出已存在的features/performance分支&nbsp;<br>git checkout --track hotfixes/BJVEP933&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支<br>git checkout v2.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 检出版本v2.0<br>git checkout -b devel origin/develop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 从远程分支develop创建新本地分支devel并检出&nbsp;<br>git checkout -- README&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 检出head版本的README文件（可用于修改错误回退）&nbsp;<br>git merge origin/master&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 合并远程master分支至当前分支&nbsp;<br>git cherry-pick ff44785404a8e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 合并提交ff44785404a8e的修改&nbsp;<br>git push origin master&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 将当前分支push到远程master分支&nbsp;<br>git push origin :hotfixes/BJVEP933&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 删除远程仓库的hotfixes/BJVEP933分支&nbsp;<br>git push --tags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 把所有tag推送到远程仓库&nbsp;<br>git fetch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 获取所有远程分支（不更新本地分支，另需merge）&nbsp;<br>git fetch --prune&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 获取所有原创分支并清除服务器上已删掉的分支&nbsp;<br>git pull origin master&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 获取远程分支master并merge到当前分支&nbsp;<br>git mv README README2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 重命名文件README为README2&nbsp;<br>git reset --hard HEAD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 将当前版本重置为HEAD（通常用于merge失败回退）&nbsp;<br>git rebase&nbsp;<br>git branch -d hotfixes/BJVEP933&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）&nbsp;<br>git branch -D hotfixes/BJVEP933&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 强制删除分支hotfixes/BJVEP933&nbsp;<br>git ls-files&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 列出git index包含的文件&nbsp;<br>git show-branch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 图示当前分支历史&nbsp;<br>git show-branch --all&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 图示所有分支历史&nbsp;<br>git whatchanged&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示提交历史对应的文件修改&nbsp;<br>git revert dfb02e6e4f2f7b573337763e5c0013802e392818&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818&nbsp;<br>git ls-tree HEAD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 内部命令：显示某个git对象&nbsp;<br>git rev-parse v2.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 内部命令：显示某个ref对于的SHA1 HASH&nbsp;<br>git reflog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示所有提交，包括孤立节点&nbsp;<br>git show HEAD@{5}&nbsp;<br>git show master@{yesterday}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 显示master分支昨天的状态&nbsp;<br>git log --pretty=format:\'%h %s\' --graph&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 图示提交日志&nbsp;<br>git show HEAD~3<br>git show -s --pretty=raw 2be7fcb476&nbsp;<br>git stash&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 暂存当前修改，将所有至为HEAD状态&nbsp;<br>git stash list&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 查看所有暂存&nbsp;<br>git stash show -p stash@{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 参考第一次暂存&nbsp;<br>git stash apply stash@{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 应用第一次暂存&nbsp;<br>git grep \"delete from\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 文件中搜索文本“delete from”&nbsp;<br>git grep -e \'#define\' --and -e SORT_DIRENT&nbsp;<br>git gc&nbsp;<br>git fsck</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"><br></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;color:rgb(69,69,69);font-size:14px;font-family:tahoma, arial, \'宋体\';line-height:25.2px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\"><a href=\"http://gitref.org/index.html\" style=\"background:transparent;color:rgb(63,167,203);margin:0px;padding:0px;\">Git</a>&nbsp;是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">Git常用操作命令：</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">1)&nbsp;远程仓库相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">检出仓库：$ git clone git://github.com/jquery/jquery.git</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">查看远程仓库：$ git remote -v</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">添加远程仓库：$ git remote add [name] [url]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">删除远程仓库：$ git remote rm [name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">修改远程仓库：$ git remote set-url --push&nbsp;[name]&nbsp;[newUrl]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">拉取远程仓库：$ git pull [remoteName] [localBranchName]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">推送远程仓库：$ git push [remoteName] [localBranchName]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">$git push origin test:master &nbsp; &nbsp; &nbsp; &nbsp; //&nbsp;提交本地test分支作为远程的master分支</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">$git push origin test:test &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//&nbsp;提交本地test分支作为远程的test分支</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">2）分支(branch)操作相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">查看本地分支：$ git branch</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">查看远程分支：$ git branch -r</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">切换分支：$ git checkout [name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">创建新分支并立即切换到新分支：$ git checkout -b [name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">创建远程分支(本地分支push到远程)：$ git push origin [name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">删除远程分支：$ git push origin :heads/[name]&nbsp;或&nbsp;$ gitpush origin :[name]&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">$git symbolic-ref HEAD refs/heads/[name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">$rm .git/index</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">$git clean -fdx</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">3）版本(tag)操作相关命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">查看版本：$ git tag</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">创建版本：$ git tag [name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">删除版本：$ git tag -d [name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">查看远程版本：$ git tag -r</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">创建远程版本(本地版本push到远程)：$ git push origin [name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">删除远程版本：$ git push origin :refs/tags/[name]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">合并远程仓库的tag到本地：$ git pull origin --tags</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">上传本地tag到远程仓库：$ git push origin --tags</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">创建带注释的tag：$ git tag -a [name] -m \'yourMessage\'</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">4)&nbsp;子模块(submodule)相关操作命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">添加子模块：$ git submodule add [url] [path]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;&nbsp;&nbsp;如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">初始化子模块：$ git submodule init &nbsp;----只在首次检出仓库时运行一次就行</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">删除子模块：（分4步走哦）</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;1)&nbsp;$ git rm --cached [path]</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;2)&nbsp;编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;3)&nbsp;编辑“&nbsp;.git/config”文件，将子模块的相关配置节点删除掉</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;4)&nbsp;手动删除子模块残留的目录</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">5）忽略一些文件、文件夹不提交</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">target</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">bin</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">*.db</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\"></p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">=====================</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">Git 常用命令</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">git branch 查看本地所有分支<br>git status 查看当前状态&nbsp;<br>git commit 提交&nbsp;<br>git branch -a 查看所有的分支<br>git branch -r 查看本地所有分支<br>git commit -am \"init\" 提交并且加注释&nbsp;<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上&nbsp;<br>git remote show origin 显示远程库origin里的资源&nbsp;<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联&nbsp;<br>git checkout --track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config --list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m \"This is the message describing the commit\" 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm --cached a.a 移除文件(只从暂存区中删除)<br>git commit -m \"remove\" 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff --cached 或 $ git diff --staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中<br>git stash pop 将文件从临时空间pop下来<br>---------------------------------------------------------<br>git remote add origin git@github.com:username/Hello-World.git<br>git push origin master 将本地项目给提交到服务器中<br>-----------------------------------------------------------<br>git pull 本地与服务器端同步<br>-----------------------------------------------------------------<br>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。<br>git push origin serverfix:awesomebranch<br>------------------------------------------------------------------<br>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m \"log_message\" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支<br>du -hs<br><br>-----------------------------------------------------------<br>mkdir WebApp<br>cd WebApp<br>git init<br>touch README<br>git add README<br>git commit -m \'first commit\'<br>git remote add origin git@github.com:daixu/WebApp.git<br>git push -u origin master</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\">Git 常用命令图表&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;color:rgb(69,69,69);font-family:\'PingFang SC\', \'Microsoft YaHei\', SimHei, Arial, SimSun;font-size:16px;\"><img src=\"https://img-blog.csdn.net/20180620113451746?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbGFvZGE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\"><br></p>\r\n<br>\r\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/halaoda/article/details/78661334&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\r\n        </div>\r\n    </article>', '2021-04-08 15:03:23', '1', '1', '原创', '', '', '\0', 'git', '2021-04-08 15:03:23', '2', '8', '123456');

-- ----------------------------
-- Table structure for t_blog_tags
-- ----------------------------
DROP TABLE IF EXISTS `t_blog_tags`;
CREATE TABLE `t_blog_tags` (
  `blogs_id` bigint(20) NOT NULL,
  `tags_id` bigint(20) NOT NULL,
  KEY `FK5feau0gb4lq47fdb03uboswm8` (`tags_id`),
  KEY `FKh4pacwjwofrugxa9hpwaxg6mr` (`blogs_id`),
  CONSTRAINT `FK5feau0gb4lq47fdb03uboswm8` FOREIGN KEY (`tags_id`) REFERENCES `t_tag` (`id`),
  CONSTRAINT `FKh4pacwjwofrugxa9hpwaxg6mr` FOREIGN KEY (`blogs_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blog_tags
-- ----------------------------
INSERT INTO `t_blog_tags` VALUES ('2', '2');
INSERT INTO `t_blog_tags` VALUES ('3', '1');
INSERT INTO `t_blog_tags` VALUES ('3', '2');
INSERT INTO `t_blog_tags` VALUES ('4', '1');
INSERT INTO `t_blog_tags` VALUES ('4', '2');
INSERT INTO `t_blog_tags` VALUES ('6', '1');
INSERT INTO `t_blog_tags` VALUES ('6', '3');
INSERT INTO `t_blog_tags` VALUES ('8', '1');
INSERT INTO `t_blog_tags` VALUES ('8', '2');
INSERT INTO `t_blog_tags` VALUES ('9', '6');
INSERT INTO `t_blog_tags` VALUES ('9', '7');
INSERT INTO `t_blog_tags` VALUES ('10', '1');
INSERT INTO `t_blog_tags` VALUES ('10', '2');
INSERT INTO `t_blog_tags` VALUES ('7', '6');
INSERT INTO `t_blog_tags` VALUES ('7', '7');
INSERT INTO `t_blog_tags` VALUES ('14', '1');
INSERT INTO `t_blog_tags` VALUES ('14', '2');
INSERT INTO `t_blog_tags` VALUES ('15', '8');
INSERT INTO `t_blog_tags` VALUES ('15', '9');
INSERT INTO `t_blog_tags` VALUES ('16', '7');
INSERT INTO `t_blog_tags` VALUES ('16', '8');
INSERT INTO `t_blog_tags` VALUES ('16', '10');
INSERT INTO `t_blog_tags` VALUES ('5', '3');
INSERT INTO `t_blog_tags` VALUES ('5', '4');
INSERT INTO `t_blog_tags` VALUES ('5', '5');
INSERT INTO `t_blog_tags` VALUES ('5', '6');
INSERT INTO `t_blog_tags` VALUES ('5', '7');
INSERT INTO `t_blog_tags` VALUES ('17', '1');
INSERT INTO `t_blog_tags` VALUES ('17', '8');
INSERT INTO `t_blog_tags` VALUES ('17', '9');
INSERT INTO `t_blog_tags` VALUES ('18', '3');
INSERT INTO `t_blog_tags` VALUES ('18', '4');
INSERT INTO `t_blog_tags` VALUES ('18', '5');
INSERT INTO `t_blog_tags` VALUES ('21', '3');
INSERT INTO `t_blog_tags` VALUES ('21', '4');
INSERT INTO `t_blog_tags` VALUES ('22', '4');
INSERT INTO `t_blog_tags` VALUES ('22', '5');
INSERT INTO `t_blog_tags` VALUES ('22', '8');
INSERT INTO `t_blog_tags` VALUES ('22', '9');
INSERT INTO `t_blog_tags` VALUES ('23', '6');
INSERT INTO `t_blog_tags` VALUES ('23', '7');
INSERT INTO `t_blog_tags` VALUES ('23', '12');
INSERT INTO `t_blog_tags` VALUES ('24', '10');
INSERT INTO `t_blog_tags` VALUES ('24', '11');
INSERT INTO `t_blog_tags` VALUES ('24', '12');
INSERT INTO `t_blog_tags` VALUES ('24', '13');
INSERT INTO `t_blog_tags` VALUES ('25', '3');
INSERT INTO `t_blog_tags` VALUES ('25', '4');
INSERT INTO `t_blog_tags` VALUES ('25', '5');
INSERT INTO `t_blog_tags` VALUES ('26', '2');
INSERT INTO `t_blog_tags` VALUES ('26', '3');
INSERT INTO `t_blog_tags` VALUES ('27', '7');
INSERT INTO `t_blog_tags` VALUES ('27', '10');
INSERT INTO `t_blog_tags` VALUES ('27', '11');
INSERT INTO `t_blog_tags` VALUES ('20', '6');
INSERT INTO `t_blog_tags` VALUES ('20', '7');
INSERT INTO `t_blog_tags` VALUES ('20', '8');
INSERT INTO `t_blog_tags` VALUES ('20', '9');
INSERT INTO `t_blog_tags` VALUES ('28', '5');
INSERT INTO `t_blog_tags` VALUES ('28', '6');
INSERT INTO `t_blog_tags` VALUES ('29', '3');
INSERT INTO `t_blog_tags` VALUES ('29', '4');
INSERT INTO `t_blog_tags` VALUES ('30', '1');
INSERT INTO `t_blog_tags` VALUES ('30', '2');
INSERT INTO `t_blog_tags` VALUES ('31', '1');
INSERT INTO `t_blog_tags` VALUES ('31', '2');
INSERT INTO `t_blog_tags` VALUES ('32', '1');
INSERT INTO `t_blog_tags` VALUES ('32', '2');
INSERT INTO `t_blog_tags` VALUES ('33', '20');
INSERT INTO `t_blog_tags` VALUES ('33', '21');
INSERT INTO `t_blog_tags` VALUES ('33', '22');
INSERT INTO `t_blog_tags` VALUES ('34', '2');
INSERT INTO `t_blog_tags` VALUES ('34', '3');
INSERT INTO `t_blog_tags` VALUES ('35', '1');
INSERT INTO `t_blog_tags` VALUES ('35', '2');
INSERT INTO `t_blog_tags` VALUES ('36', '2');
INSERT INTO `t_blog_tags` VALUES ('36', '3');
INSERT INTO `t_blog_tags` VALUES ('37', '21');
INSERT INTO `t_blog_tags` VALUES ('37', '22');
INSERT INTO `t_blog_tags` VALUES ('38', '2');
INSERT INTO `t_blog_tags` VALUES ('38', '3');
INSERT INTO `t_blog_tags` VALUES ('39', '6');
INSERT INTO `t_blog_tags` VALUES ('39', '7');
INSERT INTO `t_blog_tags` VALUES ('40', '3');
INSERT INTO `t_blog_tags` VALUES ('40', '4');
INSERT INTO `t_blog_tags` VALUES ('41', '3');
INSERT INTO `t_blog_tags` VALUES ('41', '4');
INSERT INTO `t_blog_tags` VALUES ('42', '1');
INSERT INTO `t_blog_tags` VALUES ('42', '2');
INSERT INTO `t_blog_tags` VALUES ('43', '3');
INSERT INTO `t_blog_tags` VALUES ('43', '4');
INSERT INTO `t_blog_tags` VALUES ('44', '4');
INSERT INTO `t_blog_tags` VALUES ('44', '5');
INSERT INTO `t_blog_tags` VALUES ('46', '5');
INSERT INTO `t_blog_tags` VALUES ('46', '6');
INSERT INTO `t_blog_tags` VALUES ('47', '2');
INSERT INTO `t_blog_tags` VALUES ('47', '3');
INSERT INTO `t_blog_tags` VALUES ('48', '1');
INSERT INTO `t_blog_tags` VALUES ('48', '2');
INSERT INTO `t_blog_tags` VALUES ('49', '1');
INSERT INTO `t_blog_tags` VALUES ('49', '2');
INSERT INTO `t_blog_tags` VALUES ('50', '6');
INSERT INTO `t_blog_tags` VALUES ('50', '7');
INSERT INTO `t_blog_tags` VALUES ('51', '1');
INSERT INTO `t_blog_tags` VALUES ('51', '2');
INSERT INTO `t_blog_tags` VALUES ('52', '1');
INSERT INTO `t_blog_tags` VALUES ('52', '2');
INSERT INTO `t_blog_tags` VALUES ('53', '1');
INSERT INTO `t_blog_tags` VALUES ('53', '2');
INSERT INTO `t_blog_tags` VALUES ('54', '3');
INSERT INTO `t_blog_tags` VALUES ('54', '4');
INSERT INTO `t_blog_tags` VALUES ('55', '1');
INSERT INTO `t_blog_tags` VALUES ('55', '2');
INSERT INTO `t_blog_tags` VALUES ('58', '1');
INSERT INTO `t_blog_tags` VALUES ('58', '2');
INSERT INTO `t_blog_tags` VALUES ('59', '1');
INSERT INTO `t_blog_tags` VALUES ('59', '2');
INSERT INTO `t_blog_tags` VALUES ('56', '3');
INSERT INTO `t_blog_tags` VALUES ('56', '4');
INSERT INTO `t_blog_tags` VALUES ('60', '1');
INSERT INTO `t_blog_tags` VALUES ('60', '2');
INSERT INTO `t_blog_tags` VALUES ('61', '1');
INSERT INTO `t_blog_tags` VALUES ('61', '2');
INSERT INTO `t_blog_tags` VALUES ('62', '1');
INSERT INTO `t_blog_tags` VALUES ('62', '2');
INSERT INTO `t_blog_tags` VALUES ('63', '8');
INSERT INTO `t_blog_tags` VALUES ('63', '9');
INSERT INTO `t_blog_tags` VALUES ('57', '1');
INSERT INTO `t_blog_tags` VALUES ('57', '2');
INSERT INTO `t_blog_tags` VALUES ('64', '10');
INSERT INTO `t_blog_tags` VALUES ('64', '11');
INSERT INTO `t_blog_tags` VALUES ('65', '9');
INSERT INTO `t_blog_tags` VALUES ('65', '10');

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `admin_comment` bit(1) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `blog_id` bigint(20) DEFAULT NULL,
  `parent_comment_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKke3uogd04j4jx316m1p51e05u` (`blog_id`),
  KEY `FK4jj284r3pb7japogvo6h72q95` (`parent_comment_id`),
  CONSTRAINT `FK4jj284r3pb7japogvo6h72q95` FOREIGN KEY (`parent_comment_id`) REFERENCES `t_comment` (`id`),
  CONSTRAINT `FKke3uogd04j4jx316m1p51e05u` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES ('1', '\0', '/images/avatar.png', '阿萨大', '2020-05-03 19:51:06', '1270001737@qq.com', '撒旦', '2', null);
INSERT INTO `t_comment` VALUES ('2', '\0', '/images/avatar.png', 'bang', '2020-05-14 16:25:21', '1270001737@qq.com', 'as', '15', null);
INSERT INTO `t_comment` VALUES ('3', '\0', '/images/avatar.png', 'ab', '2020-05-14 16:25:25', '1270001737@qq.com', 'as', '15', null);
INSERT INTO `t_comment` VALUES ('4', '\0', '/images/avatar.png', 'ahhh阿松大', '2020-05-14 16:25:36', '201717907@stu.ncwu.edu.cn', '阿松大', '15', null);
INSERT INTO `t_comment` VALUES ('5', '\0', '/images/avatar.png', '撒旦', '2020-05-18 16:41:00', '201717907@stu.ncwu.edu.cn', '姜懿', '17', null);
INSERT INTO `t_comment` VALUES ('6', '\0', '/images/avatar.png', '暗色调爱上的', '2020-05-19 23:32:49', '201717907@stu.ncwu.edu.cn', '暗色调', '15', null);
INSERT INTO `t_comment` VALUES ('7', '\0', '/images/avatar.png', '暗色调', '2020-05-19 23:32:59', '1270001737@qq.com', '暗色调', '15', null);
INSERT INTO `t_comment` VALUES ('8', '', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(34).jpg', 'http://www.szq666.xyz/images/avatar.png', '2020-06-19 23:15:48', '1270001737@qq.com', 'SX-CD', '2', null);
INSERT INTO `t_comment` VALUES ('9', '', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(34).jpg', '1523', '2020-06-19 23:15:54', '1270001737@qq.com', 'SX-CD', '2', null);
INSERT INTO `t_comment` VALUES ('10', '', 'http://szq.szq666.xyz/data/User/admin/home/desktop/pic/1%20(34).jpg', 'asd', '2020-06-19 23:15:59', '1270001737@qq.com', 'SX-CD', '2', '1');
INSERT INTO `t_comment` VALUES ('11', '\0', '/images/avatar.png', '撒旦', '2021-01-23 19:40:31', '1@qq.com', '1', '28', null);
INSERT INTO `t_comment` VALUES ('12', '\0', '/images/avatar.png', '哈哈哈', '2021-03-11 11:52:49', '646466@qqqom', '小鬼', '57', null);
INSERT INTO `t_comment` VALUES ('13', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:29', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('14', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:30', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('15', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:30', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('16', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:31', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('17', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:31', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('18', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:31', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('19', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:31', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('20', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:31', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('21', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:31', 'aasd@qq.com', '123', '57', null);
INSERT INTO `t_comment` VALUES ('22', '\0', '/images/avatar.png', '哈哈哈', '2021-03-18 21:31:32', 'aasd@qq.com', '123', '57', null);

-- ----------------------------
-- Table structure for t_log
-- ----------------------------
DROP TABLE IF EXISTS `t_log`;
CREATE TABLE `t_log` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` datetime DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `detail` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_log
-- ----------------------------
INSERT INTO `t_log` VALUES ('1', '2020-04-29 18:01:04', '1、优化了动态背景\r\n2、添加网页背景线条跟随鼠标吸附效果\r\n3、博客文章改用卡片浮动形式添加跳转链接，鼠标滑过有按压效果,同时标签和头像等实现交替淡入淡出切换效果\r\n4、所有页面大部分都添加一点点的阴影效果。', '1、优化了动态背景\r\n2、添加网页背景线条跟随鼠标吸附效果\r\n3、博客文章改用卡片浮动形式添加跳转链接，鼠标滑过有按压效果,同时标签和头像等实现交替淡入淡出切换效果\r\n4、所有页面大部分都添加一点点的阴影效果。', 'UI优化', null);
INSERT INTO `t_log` VALUES ('2', '2020-03-25 18:02:02', '1、修改了js、css、pic存储方案（放到七牛云上了），使得博客变得更快。\r\n', '1、修改了js、css、pic存储方案（放到七牛云上了），使得博客变得更快。\r\n', '效率', null);
INSERT INTO `t_log` VALUES ('3', '2020-03-11 18:02:14', '1、修改了头部标签、更新了学校年纪\r\n2、增加了拦截，使得无法通过映射访问后台，防止删库操作', '1、修改了头部标签、更新了学校年纪\r\n2、增加了拦截，使得无法通过映射访问后台，防止删库操作', '安全', null);
INSERT INTO `t_log` VALUES ('4', '2020-02-15 18:02:26', '1、博客内测上线！', '1、博客内测上线！', '上线', null);
INSERT INTO `t_log` VALUES ('6', '2020-05-19 18:47:47', '1、新增动态日志系统\r\n2、以前是静态系统，现在更新的频繁，主要讲解网站的更新换代。', '1、新增动态日志系统\r\n2、以前是静态系统，现在更新的频繁，主要讲解网站的更新换代。\r\n3、根据type页面然后构造dao、service、control层', '增加了用户体验', null);
INSERT INTO `t_log` VALUES ('7', '2020-05-19 21:59:57', '1、更改了 预览页显示不出的情况\r\n2、更改了非markdown语法，现在预览页也能正常显示', 'String content = blog.getContent();\r\n            blog.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\r\n//            MarkdownUtils.markdownToHtmlExtensions(blog.getContent());', '纠结院校ing', null);
INSERT INTO `t_log` VALUES ('8', '2021-01-14 21:29:42', '新增日志粘贴功能 将图片放到服务器上完成上传，通过ctrl+v  粘贴完成', '将图片放到服务器上完成上传，通过ctrl+v  粘贴完成', '新增截图粘贴功能', '2021-01-14 21:29:57');
INSERT INTO `t_log` VALUES ('9', '2021-03-03 23:43:45', '最近忙于字节的面试，很苦也很充实哈哈哈哈哈哈哈哈哈', '最近忙于字节的面试，很苦也很充实哈哈哈哈哈哈哈哈哈', '北京邮电大学--字节跳动', '2021-03-03 23:44:02');

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES ('1', 'ACMer');
INSERT INTO `t_tag` VALUES ('2', '数据库');
INSERT INTO `t_tag` VALUES ('3', '网站设计');
INSERT INTO `t_tag` VALUES ('4', '前后端开发');
INSERT INTO `t_tag` VALUES ('5', 'Blue Bridge');
INSERT INTO `t_tag` VALUES ('6', '做时间的管理者');
INSERT INTO `t_tag` VALUES ('7', '与时间赛跑23123');
INSERT INTO `t_tag` VALUES ('8', 'Github');
INSERT INTO `t_tag` VALUES ('9', 'git');
INSERT INTO `t_tag` VALUES ('10', '加油加油');
INSERT INTO `t_tag` VALUES ('11', 'Program design');
INSERT INTO `t_tag` VALUES ('12', 'competition');
INSERT INTO `t_tag` VALUES ('13', 'SQL');
INSERT INTO `t_tag` VALUES ('14', 'Cloud Server');
INSERT INTO `t_tag` VALUES ('15', 'Web');
INSERT INTO `t_tag` VALUES ('16', 'html');
INSERT INTO `t_tag` VALUES ('17', 'js');
INSERT INTO `t_tag` VALUES ('18', 'jsp');
INSERT INTO `t_tag` VALUES ('19', 'css1');
INSERT INTO `t_tag` VALUES ('20', 'HashMap');
INSERT INTO `t_tag` VALUES ('21', '字节跳动');
INSERT INTO `t_tag` VALUES ('22', '北邮');
INSERT INTO `t_tag` VALUES ('23', '小鬼宝宝');

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_type
-- ----------------------------
INSERT INTO `t_type` VALUES ('1', 'ACM');
INSERT INTO `t_type` VALUES ('2', '菜菜');
INSERT INTO `t_type` VALUES ('3', '腌臜菜');
INSERT INTO `t_type` VALUES ('4', 'Python');
INSERT INTO `t_type` VALUES ('5', 'Django');
INSERT INTO `t_type` VALUES ('6', 'Spring boot');
INSERT INTO `t_type` VALUES ('7', 'Github');
INSERT INTO `t_type` VALUES ('8', 'git');
INSERT INTO `t_type` VALUES ('9', '保研推免');
INSERT INTO `t_type` VALUES ('10', 'JAVA');
INSERT INTO `t_type` VALUES ('11', 'Linux');
INSERT INTO `t_type` VALUES ('12', 'English');
INSERT INTO `t_type` VALUES ('13', 'config question');
INSERT INTO `t_type` VALUES ('14', 'Markdown');
INSERT INTO `t_type` VALUES ('15', 'Semantic');
INSERT INTO `t_type` VALUES ('16', 'Jetbrains');
INSERT INTO `t_type` VALUES ('17', '回忆');
INSERT INTO `t_type` VALUES ('18', '蓝桥杯');
INSERT INTO `t_type` VALUES ('19', '天梯赛');
INSERT INTO `t_type` VALUES ('20', '面试');
INSERT INTO `t_type` VALUES ('21', '情侣');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=123457 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES ('123456', 'https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=917297805,3450343040&fm=26&gp=0.jpg', '2020-03-31 09:21:49', '1270001737@qq.com', 'SX-CD', 'e10adc3949ba59abbe56e057f20f883e', '1', '2020-03-31 09:21:20', '123456');
